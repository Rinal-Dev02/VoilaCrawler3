// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: chameleon/smelter/v1/crawl/data.proto

package crawl

import (
	http "github.com/voiladev/VoilaCrawler/pkg/protoc-gen-go/chameleon/api/http"
	proxy "github.com/voiladev/VoilaCrawler/pkg/protoc-gen-go/chameleon/smelter/v1/crawl/proxy"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CrawlerStatus
type CrawlerStatus int32

const (
	// StatusUnknown
	CrawlerStatus_StatusUnknown CrawlerStatus = 0
	// Online
	CrawlerStatus_Online CrawlerStatus = 1
	// Offline
	CrawlerStatus_Offline CrawlerStatus = 2
)

// Enum value maps for CrawlerStatus.
var (
	CrawlerStatus_name = map[int32]string{
		0: "StatusUnknown",
		1: "Online",
		2: "Offline",
	}
	CrawlerStatus_value = map[string]int32{
		"StatusUnknown": 0,
		"Online":        1,
		"Offline":       2,
	}
)

func (x CrawlerStatus) Enum() *CrawlerStatus {
	p := new(CrawlerStatus)
	*p = x
	return p
}

func (x CrawlerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CrawlerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_chameleon_smelter_v1_crawl_data_proto_enumTypes[0].Descriptor()
}

func (CrawlerStatus) Type() protoreflect.EnumType {
	return &file_chameleon_smelter_v1_crawl_data_proto_enumTypes[0]
}

func (x CrawlerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CrawlerStatus.Descriptor instead.
func (CrawlerStatus) EnumDescriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_data_proto_rawDescGZIP(), []int{0}
}

// Metadata
type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CreatedTime
	CreatedTime string `protobuf:"bytes,1,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
	// UpdatedTime
	UpdatedTime string `protobuf:"bytes,2,opt,name=updatedTime,proto3" json:"updatedTime,omitempty"`
	// IsDeleted
	IsDeleted bool `protobuf:"varint,3,opt,name=isDeleted,proto3" json:"isDeleted,omitempty"`
	// DeletedTime
	DeletedTime string `protobuf:"bytes,4,opt,name=deletedTime,proto3" json:"deletedTime,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_data_proto_rawDescGZIP(), []int{0}
}

func (x *Metadata) GetCreatedTime() string {
	if x != nil {
		return x.CreatedTime
	}
	return ""
}

func (x *Metadata) GetUpdatedTime() string {
	if x != nil {
		return x.UpdatedTime
	}
	return ""
}

func (x *Metadata) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *Metadata) GetDeletedTime() string {
	if x != nil {
		return x.DeletedTime
	}
	return ""
}

// CrawlerOptions
type CrawlerOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EnableHeadless
	EnableHeadless bool `protobuf:"varint,2,opt,name=enableHeadless,proto3" json:"enableHeadless,omitempty"`
	// JsWaitDuration
	JsWaitDuration int64 `protobuf:"varint,52,opt,name=jsWaitDuration,proto3" json:"jsWaitDuration,omitempty"`
	// EnableSessionInit
	EnableSessionInit bool `protobuf:"varint,3,opt,name=enableSessionInit,proto3" json:"enableSessionInit,omitempty"`
	// KeepSession
	KeepSession bool `protobuf:"varint,4,opt,name=keepSession,proto3" json:"keepSession,omitempty"`
	// DisableCookieJar
	DisableCookieJar bool `protobuf:"varint,51,opt,name=disableCookieJar,proto3" json:"disableCookieJar,omitempty"`
	// SessionTtl
	SessoinTtl int64 `protobuf:"varint,5,opt,name=sessoinTtl,proto3" json:"sessoinTtl,omitempty"`
	// DisableRedirect
	DisableRedirect bool `protobuf:"varint,6,opt,name=disableRedirect,proto3" json:"disableRedirect,omitempty"`
	// LoginRequired
	LoginRequired bool `protobuf:"varint,7,opt,name=loginRequired,proto3" json:"loginRequired,omitempty"`
	// Headers
	Headers map[string]string `protobuf:"bytes,11,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// CustomCookies
	Cookies []*http.Cookie `protobuf:"bytes,12,rep,name=cookies,proto3" json:"cookies,omitempty"`
	// Reliability
	Reliability proxy.ProxyReliability `protobuf:"varint,15,opt,name=reliability,proto3,enum=chameleon.smelter.v1.crawl.proxy.ProxyReliability" json:"reliability,omitempty"`
	// RequestFilterKeys
	RequestFilterKeys []string `protobuf:"bytes,61,rep,name=requestFilterKeys,proto3" json:"requestFilterKeys,omitempty"`
}

func (x *CrawlerOptions) Reset() {
	*x = CrawlerOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrawlerOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrawlerOptions) ProtoMessage() {}

func (x *CrawlerOptions) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrawlerOptions.ProtoReflect.Descriptor instead.
func (*CrawlerOptions) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_data_proto_rawDescGZIP(), []int{1}
}

func (x *CrawlerOptions) GetEnableHeadless() bool {
	if x != nil {
		return x.EnableHeadless
	}
	return false
}

func (x *CrawlerOptions) GetJsWaitDuration() int64 {
	if x != nil {
		return x.JsWaitDuration
	}
	return 0
}

func (x *CrawlerOptions) GetEnableSessionInit() bool {
	if x != nil {
		return x.EnableSessionInit
	}
	return false
}

func (x *CrawlerOptions) GetKeepSession() bool {
	if x != nil {
		return x.KeepSession
	}
	return false
}

func (x *CrawlerOptions) GetDisableCookieJar() bool {
	if x != nil {
		return x.DisableCookieJar
	}
	return false
}

func (x *CrawlerOptions) GetSessoinTtl() int64 {
	if x != nil {
		return x.SessoinTtl
	}
	return 0
}

func (x *CrawlerOptions) GetDisableRedirect() bool {
	if x != nil {
		return x.DisableRedirect
	}
	return false
}

func (x *CrawlerOptions) GetLoginRequired() bool {
	if x != nil {
		return x.LoginRequired
	}
	return false
}

func (x *CrawlerOptions) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *CrawlerOptions) GetCookies() []*http.Cookie {
	if x != nil {
		return x.Cookies
	}
	return nil
}

func (x *CrawlerOptions) GetReliability() proxy.ProxyReliability {
	if x != nil {
		return x.Reliability
	}
	return proxy.ProxyReliability_ReliabilityDefault
}

func (x *CrawlerOptions) GetRequestFilterKeys() []string {
	if x != nil {
		return x.RequestFilterKeys
	}
	return nil
}

// Crawler
type Crawler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// SiteId
	SiteId string `protobuf:"bytes,2,opt,name=siteId,proto3" json:"siteId,omitempty"`
	// Version
	Version int32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	// Crawler
	AllowedDomains []string `protobuf:"bytes,6,rep,name=allowedDomains,proto3" json:"allowedDomains,omitempty"`
	// Options
	Options *CrawlerOptions `protobuf:"bytes,10,opt,name=options,proto3" json:"options,omitempty"`
	// Metadata
	Metadata *Crawler_Metadata `protobuf:"bytes,15,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Crawler) Reset() {
	*x = Crawler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Crawler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Crawler) ProtoMessage() {}

func (x *Crawler) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Crawler.ProtoReflect.Descriptor instead.
func (*Crawler) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_data_proto_rawDescGZIP(), []int{2}
}

func (x *Crawler) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Crawler) GetSiteId() string {
	if x != nil {
		return x.SiteId
	}
	return ""
}

func (x *Crawler) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Crawler) GetAllowedDomains() []string {
	if x != nil {
		return x.AllowedDomains
	}
	return nil
}

func (x *Crawler) GetOptions() *CrawlerOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Crawler) GetMetadata() *Crawler_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// NodeStatus
type NodeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Host
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// MaxAPIConcurrency
	MaxAPIConcurrency int32 `protobuf:"varint,3,opt,name=maxAPIConcurrency,proto3" json:"maxAPIConcurrency,omitempty"`
	// MaxMQConcurrency
	MaxMQConcurrency int32 `protobuf:"varint,4,opt,name=maxMQConcurrency,proto3" json:"maxMQConcurrency,omitempty"`
	// CurrentConcurrency
	CurrentConcurrency int32 `protobuf:"varint,5,opt,name=currentConcurrency,proto3" json:"currentConcurrency,omitempty"`
	// CurrentMQConcurrency
	CurrentMQConcurrency int32 `protobuf:"varint,6,opt,name=currentMQConcurrency,proto3" json:"currentMQConcurrency,omitempty"`
}

func (x *NodeStatus) Reset() {
	*x = NodeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStatus) ProtoMessage() {}

func (x *NodeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeStatus.ProtoReflect.Descriptor instead.
func (*NodeStatus) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_data_proto_rawDescGZIP(), []int{3}
}

func (x *NodeStatus) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *NodeStatus) GetMaxAPIConcurrency() int32 {
	if x != nil {
		return x.MaxAPIConcurrency
	}
	return 0
}

func (x *NodeStatus) GetMaxMQConcurrency() int32 {
	if x != nil {
		return x.MaxMQConcurrency
	}
	return 0
}

func (x *NodeStatus) GetCurrentConcurrency() int32 {
	if x != nil {
		return x.CurrentConcurrency
	}
	return 0
}

func (x *NodeStatus) GetCurrentMQConcurrency() int32 {
	if x != nil {
		return x.CurrentMQConcurrency
	}
	return 0
}

// Request
type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TracingId 全局跟踪ID, 有别于jobId, job 可能执行多次，每次执行，都会生成一个随机的tracingId
	// TracingId 用于判别某个发起的任务是否完结
	TracingId string `protobuf:"bytes,1,opt,name=tracingId,proto3" json:"tracingId,omitempty"`
	// JobId
	JobId string `protobuf:"bytes,2,opt,name=jobId,proto3" json:"jobId,omitempty"`
	// ReqId
	ReqId string `protobuf:"bytes,3,opt,name=reqId,proto3" json:"reqId,omitempty"`
	// SiteId
	SiteId string `protobuf:"bytes,4,opt,name=siteId,proto3" json:"siteId,omitempty"`
	// Method
	Method string `protobuf:"bytes,12,opt,name=method,proto3" json:"method,omitempty"`
	// URL
	Url string `protobuf:"bytes,13,opt,name=url,proto3" json:"url,omitempty"`
	// CustomHeaders
	CustomHeaders map[string]string `protobuf:"bytes,14,rep,name=customHeaders,proto3" json:"customHeaders,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// CustomCookies
	CustomCookies []*http.Cookie `protobuf:"bytes,15,rep,name=customCookies,proto3" json:"customCookies,omitempty"`
	// Body
	Body string `protobuf:"bytes,20,opt,name=body,proto3" json:"body,omitempty"`
	// Parent use this to set request referer
	Parent *Request `protobuf:"bytes,41,opt,name=parent,proto3" json:"parent,omitempty"`
	// Options
	Options *Request_Options `protobuf:"bytes,51,opt,name=options,proto3" json:"options,omitempty"`
	// SharingData
	SharingData map[string]string `protobuf:"bytes,101,rep,name=sharingData,proto3" json:"sharingData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_data_proto_rawDescGZIP(), []int{4}
}

func (x *Request) GetTracingId() string {
	if x != nil {
		return x.TracingId
	}
	return ""
}

func (x *Request) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *Request) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *Request) GetSiteId() string {
	if x != nil {
		return x.SiteId
	}
	return ""
}

func (x *Request) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Request) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Request) GetCustomHeaders() map[string]string {
	if x != nil {
		return x.CustomHeaders
	}
	return nil
}

func (x *Request) GetCustomCookies() []*http.Cookie {
	if x != nil {
		return x.CustomCookies
	}
	return nil
}

func (x *Request) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *Request) GetParent() *Request {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *Request) GetOptions() *Request_Options {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Request) GetSharingData() map[string]string {
	if x != nil {
		return x.SharingData
	}
	return nil
}

// RequestStatus
type RequestStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TracingId 全局跟踪ID, 有别于jobId, job 可能执行多次，每次执行，都会生成一个随机的tracingId
	// TracingId 用于判别某个发起的任务是否完结
	TracingId string `protobuf:"bytes,1,opt,name=tracingId,proto3" json:"tracingId,omitempty"`
	// JobId
	JobId string `protobuf:"bytes,2,opt,name=jobId,proto3" json:"jobId,omitempty"`
	// ReqId
	ReqId string `protobuf:"bytes,3,opt,name=reqId,proto3" json:"reqId,omitempty"`
	// SiteId
	SiteId string `protobuf:"bytes,4,opt,name=siteId,proto3" json:"siteId,omitempty"`
	// Timestamp
	Timestamp int64 `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// IsSucceed
	IsSucceed bool `protobuf:"varint,7,opt,name=isSucceed,proto3" json:"isSucceed,omitempty"`
	// SubReqCount
	SubReqCount int32 `protobuf:"varint,11,opt,name=subReqCount,proto3" json:"subReqCount,omitempty"`
	// ItemCount
	ItemCount int32 `protobuf:"varint,12,opt,name=itemCount,proto3" json:"itemCount,omitempty"`
}

func (x *RequestStatus) Reset() {
	*x = RequestStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestStatus) ProtoMessage() {}

func (x *RequestStatus) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestStatus.ProtoReflect.Descriptor instead.
func (*RequestStatus) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_data_proto_rawDescGZIP(), []int{5}
}

func (x *RequestStatus) GetTracingId() string {
	if x != nil {
		return x.TracingId
	}
	return ""
}

func (x *RequestStatus) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *RequestStatus) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RequestStatus) GetSiteId() string {
	if x != nil {
		return x.SiteId
	}
	return ""
}

func (x *RequestStatus) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RequestStatus) GetIsSucceed() bool {
	if x != nil {
		return x.IsSucceed
	}
	return false
}

func (x *RequestStatus) GetSubReqCount() int32 {
	if x != nil {
		return x.SubReqCount
	}
	return 0
}

func (x *RequestStatus) GetItemCount() int32 {
	if x != nil {
		return x.ItemCount
	}
	return 0
}

// Item
type Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// TracingId
	TracingId string `protobuf:"bytes,6,opt,name=tracingId,proto3" json:"tracingId,omitempty"`
	// SiteId
	SiteId string `protobuf:"bytes,7,opt,name=siteId,proto3" json:"siteId,omitempty"`
	// JobId
	JobId string `protobuf:"bytes,8,opt,name=jobId,proto3" json:"jobId,omitempty"`
	// ReqId
	ReqId string `protobuf:"bytes,9,opt,name=reqId,proto3" json:"reqId,omitempty"`
	// Index
	Index int32 `protobuf:"varint,10,opt,name=index,proto3" json:"index,omitempty"`
	// Data
	Data *anypb.Any `protobuf:"bytes,15,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Item) Reset() {
	*x = Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_data_proto_rawDescGZIP(), []int{6}
}

func (x *Item) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Item) GetTracingId() string {
	if x != nil {
		return x.TracingId
	}
	return ""
}

func (x *Item) GetSiteId() string {
	if x != nil {
		return x.SiteId
	}
	return ""
}

func (x *Item) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *Item) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *Item) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Item) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

// Error
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TracingId
	TracingId string `protobuf:"bytes,1,opt,name=tracingId,proto3" json:"tracingId,omitempty"`
	// SiteId
	SiteId string `protobuf:"bytes,2,opt,name=siteId,proto3" json:"siteId,omitempty"`
	// JobId
	JobId string `protobuf:"bytes,3,opt,name=jobId,proto3" json:"jobId,omitempty"`
	// ReqId
	ReqId string `protobuf:"bytes,4,opt,name=reqId,proto3" json:"reqId,omitempty"`
	// Timestamp
	Timestamp int64 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Code
	Code int32 `protobuf:"varint,9,opt,name=code,proto3" json:"code,omitempty"`
	// ErrMsg
	ErrMsg string `protobuf:"bytes,10,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	// Duration
	Duration int64 `protobuf:"varint,21,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_data_proto_rawDescGZIP(), []int{7}
}

func (x *Error) GetTracingId() string {
	if x != nil {
		return x.TracingId
	}
	return ""
}

func (x *Error) GetSiteId() string {
	if x != nil {
		return x.SiteId
	}
	return ""
}

func (x *Error) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *Error) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *Error) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Error) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Error) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *Error) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// Cookie
type CrawlerOptions_Cookie struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Value
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// Domain
	Domain string `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	// Path
	Path string `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *CrawlerOptions_Cookie) Reset() {
	*x = CrawlerOptions_Cookie{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrawlerOptions_Cookie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrawlerOptions_Cookie) ProtoMessage() {}

func (x *CrawlerOptions_Cookie) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrawlerOptions_Cookie.ProtoReflect.Descriptor instead.
func (*CrawlerOptions_Cookie) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_data_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CrawlerOptions_Cookie) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CrawlerOptions_Cookie) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CrawlerOptions_Cookie) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *CrawlerOptions_Cookie) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// Metadata
type Crawler_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OnlineUtc
	OnlineUtc int64 `protobuf:"varint,1,opt,name=onlineUtc,proto3" json:"onlineUtc,omitempty"`
	// LastHeartbeatUtc
	LastHeartbeatUtc int64 `protobuf:"varint,2,opt,name=lastHeartbeatUtc,proto3" json:"lastHeartbeatUtc,omitempty"`
}

func (x *Crawler_Metadata) Reset() {
	*x = Crawler_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Crawler_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Crawler_Metadata) ProtoMessage() {}

func (x *Crawler_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Crawler_Metadata.ProtoReflect.Descriptor instead.
func (*Crawler_Metadata) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_data_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Crawler_Metadata) GetOnlineUtc() int64 {
	if x != nil {
		return x.OnlineUtc
	}
	return 0
}

func (x *Crawler_Metadata) GetLastHeartbeatUtc() int64 {
	if x != nil {
		return x.LastHeartbeatUtc
	}
	return 0
}

// Options
type Request_Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DisableProxy
	DisableProxy bool `protobuf:"varint,1,opt,name=disableProxy,proto3" json:"disableProxy,omitempty"`
	// EnableBlockForItems @deprecated
	EnableBlockForItems bool `protobuf:"varint,2,opt,name=enableBlockForItems,proto3" json:"enableBlockForItems,omitempty"`
	// MaxTtlPerRequest 每个请求的最大时长
	MaxTtlPerRequest int32 `protobuf:"varint,6,opt,name=maxTtlPerRequest,proto3" json:"maxTtlPerRequest,omitempty"`
	// 最大可重试次数
	MaxRetryCount int32 `protobuf:"varint,12,opt,name=maxRetryCount,proto3" json:"maxRetryCount,omitempty"`
	// MaxRequestDepth 最大访问深度
	MaxRequestDepth int32 `protobuf:"varint,14,opt,name=maxRequestDepth,proto3" json:"maxRequestDepth,omitempty"`
	// ItemType type url of items, default type.googleapis.com/chameleon.smelter.v1.crawl.item.Product
	TargetTypes []string `protobuf:"bytes,15,rep,name=targetTypes,proto3" json:"targetTypes,omitempty"`
	// MaxItemCount 最大项目数
	MaxItemCount int32 `protobuf:"varint,16,opt,name=maxItemCount,proto3" json:"maxItemCount,omitempty"`
}

func (x *Request_Options) Reset() {
	*x = Request_Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request_Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request_Options) ProtoMessage() {}

func (x *Request_Options) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request_Options.ProtoReflect.Descriptor instead.
func (*Request_Options) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_data_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Request_Options) GetDisableProxy() bool {
	if x != nil {
		return x.DisableProxy
	}
	return false
}

func (x *Request_Options) GetEnableBlockForItems() bool {
	if x != nil {
		return x.EnableBlockForItems
	}
	return false
}

func (x *Request_Options) GetMaxTtlPerRequest() int32 {
	if x != nil {
		return x.MaxTtlPerRequest
	}
	return 0
}

func (x *Request_Options) GetMaxRetryCount() int32 {
	if x != nil {
		return x.MaxRetryCount
	}
	return 0
}

func (x *Request_Options) GetMaxRequestDepth() int32 {
	if x != nil {
		return x.MaxRequestDepth
	}
	return 0
}

func (x *Request_Options) GetTargetTypes() []string {
	if x != nil {
		return x.TargetTypes
	}
	return nil
}

func (x *Request_Options) GetMaxItemCount() int32 {
	if x != nil {
		return x.MaxItemCount
	}
	return 0
}

// Status
type Request_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RetryCount 每重试一次，就+1
	RetryCount int32 `protobuf:"varint,1,opt,name=retryCount,proto3" json:"retryCount,omitempty"`
	// RequestDepth Depth the crawler dig into. 这里说的就是比如从列表进入详情,从详情又进入其他详情
	RequestDepth int32 `protobuf:"varint,2,opt,name=requestDepth,proto3" json:"requestDepth,omitempty"`
}

func (x *Request_Status) Reset() {
	*x = Request_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request_Status) ProtoMessage() {}

func (x *Request_Status) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request_Status.ProtoReflect.Descriptor instead.
func (*Request_Status) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_data_proto_rawDescGZIP(), []int{4, 1}
}

func (x *Request_Status) GetRetryCount() int32 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

func (x *Request_Status) GetRequestDepth() int32 {
	if x != nil {
		return x.RequestDepth
	}
	return 0
}

var File_chameleon_smelter_v1_crawl_data_proto protoreflect.FileDescriptor

var file_chameleon_smelter_v1_crawl_data_proto_rawDesc = []byte{
	0x0a, 0x25, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2f, 0x73, 0x6d, 0x65, 0x6c,
	0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65,
	0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72,
	0x61, 0x77, 0x6c, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x74,
	0x74, 0x70, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x63,
	0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2f, 0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x01, 0x0a, 0x08, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf5, 0x05, 0x0a, 0x0e,
	0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6a, 0x73, 0x57, 0x61, 0x69, 0x74,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x34, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x6a, 0x73, 0x57, 0x61, 0x69, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c,
	0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x6b, 0x65, 0x65, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x6b, 0x65, 0x65, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a,
	0x0a, 0x10, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x4a,
	0x61, 0x72, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x4a, 0x61, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x6f, 0x69, 0x6e, 0x54, 0x74, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x6f, 0x69, 0x6e, 0x54, 0x74, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x07, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x68,
	0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a,
	0x07, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x68,
	0x74, 0x74, 0x70, 0x2e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65,
	0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x72, 0x65,
	0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x3d,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x1a, 0x5e, 0x0a, 0x06, 0x43, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xd9, 0x02, 0x0a, 0x07, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x61,
	0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x48, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73, 0x6d,
	0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x43,
	0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x54, 0x0a, 0x08, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x55,
	0x74, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x55, 0x74, 0x63, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x55, 0x74, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c,
	0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x55, 0x74, 0x63, 0x22,
	0xde, 0x01, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x41, 0x50, 0x49, 0x43, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6d,
	0x61, 0x78, 0x41, 0x50, 0x49, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x4d, 0x51, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x4d,
	0x51, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2e, 0x0a, 0x12,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x32, 0x0a, 0x14,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x51, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x4d, 0x51, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x22, 0x99, 0x08, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x5c, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x65, 0x6c,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x68, 0x74,
	0x74, 0x70, 0x2e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x3b, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63,
	0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x68, 0x61,
	0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x56, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x65, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f,
	0x6e, 0x2e, 0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61,
	0x77, 0x6c, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x68, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x1a, 0xa1, 0x02, 0x0a, 0x07, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x46, 0x6f, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61,
	0x78, 0x54, 0x74, 0x6c, 0x50, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x54, 0x74, 0x6c, 0x50, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d,
	0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x6d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x49,
	0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x6d, 0x61, 0x78, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x4c, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x1a, 0x40, 0x0a, 0x12, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10,
	0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xed, 0x01, 0x0a,
	0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x74, 0x65,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x75, 0x62, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc6, 0x01, 0x0a,
	0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62,
	0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcf, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x65, 0x71, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x3b, 0x0a, 0x0d, 0x43, 0x72, 0x61, 0x77, 0x6c,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x10, 0x02, 0x42, 0x22, 0x5a, 0x20, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f,
	0x6e, 0x2f, 0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x61,
	0x77, 0x6c, 0x3b, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chameleon_smelter_v1_crawl_data_proto_rawDescOnce sync.Once
	file_chameleon_smelter_v1_crawl_data_proto_rawDescData = file_chameleon_smelter_v1_crawl_data_proto_rawDesc
)

func file_chameleon_smelter_v1_crawl_data_proto_rawDescGZIP() []byte {
	file_chameleon_smelter_v1_crawl_data_proto_rawDescOnce.Do(func() {
		file_chameleon_smelter_v1_crawl_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_chameleon_smelter_v1_crawl_data_proto_rawDescData)
	})
	return file_chameleon_smelter_v1_crawl_data_proto_rawDescData
}

var file_chameleon_smelter_v1_crawl_data_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_chameleon_smelter_v1_crawl_data_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_chameleon_smelter_v1_crawl_data_proto_goTypes = []interface{}{
	(CrawlerStatus)(0),            // 0: chameleon.smelter.v1.crawl.CrawlerStatus
	(*Metadata)(nil),              // 1: chameleon.smelter.v1.crawl.Metadata
	(*CrawlerOptions)(nil),        // 2: chameleon.smelter.v1.crawl.CrawlerOptions
	(*Crawler)(nil),               // 3: chameleon.smelter.v1.crawl.Crawler
	(*NodeStatus)(nil),            // 4: chameleon.smelter.v1.crawl.NodeStatus
	(*Request)(nil),               // 5: chameleon.smelter.v1.crawl.Request
	(*RequestStatus)(nil),         // 6: chameleon.smelter.v1.crawl.RequestStatus
	(*Item)(nil),                  // 7: chameleon.smelter.v1.crawl.Item
	(*Error)(nil),                 // 8: chameleon.smelter.v1.crawl.Error
	(*CrawlerOptions_Cookie)(nil), // 9: chameleon.smelter.v1.crawl.CrawlerOptions.Cookie
	nil,                           // 10: chameleon.smelter.v1.crawl.CrawlerOptions.HeadersEntry
	(*Crawler_Metadata)(nil),      // 11: chameleon.smelter.v1.crawl.Crawler.Metadata
	(*Request_Options)(nil),       // 12: chameleon.smelter.v1.crawl.Request.Options
	(*Request_Status)(nil),        // 13: chameleon.smelter.v1.crawl.Request.Status
	nil,                           // 14: chameleon.smelter.v1.crawl.Request.CustomHeadersEntry
	nil,                           // 15: chameleon.smelter.v1.crawl.Request.SharingDataEntry
	(*http.Cookie)(nil),           // 16: chameleon.api.http.Cookie
	(proxy.ProxyReliability)(0),   // 17: chameleon.smelter.v1.crawl.proxy.ProxyReliability
	(*anypb.Any)(nil),             // 18: google.protobuf.Any
}
var file_chameleon_smelter_v1_crawl_data_proto_depIdxs = []int32{
	10, // 0: chameleon.smelter.v1.crawl.CrawlerOptions.headers:type_name -> chameleon.smelter.v1.crawl.CrawlerOptions.HeadersEntry
	16, // 1: chameleon.smelter.v1.crawl.CrawlerOptions.cookies:type_name -> chameleon.api.http.Cookie
	17, // 2: chameleon.smelter.v1.crawl.CrawlerOptions.reliability:type_name -> chameleon.smelter.v1.crawl.proxy.ProxyReliability
	2,  // 3: chameleon.smelter.v1.crawl.Crawler.options:type_name -> chameleon.smelter.v1.crawl.CrawlerOptions
	11, // 4: chameleon.smelter.v1.crawl.Crawler.metadata:type_name -> chameleon.smelter.v1.crawl.Crawler.Metadata
	14, // 5: chameleon.smelter.v1.crawl.Request.customHeaders:type_name -> chameleon.smelter.v1.crawl.Request.CustomHeadersEntry
	16, // 6: chameleon.smelter.v1.crawl.Request.customCookies:type_name -> chameleon.api.http.Cookie
	5,  // 7: chameleon.smelter.v1.crawl.Request.parent:type_name -> chameleon.smelter.v1.crawl.Request
	12, // 8: chameleon.smelter.v1.crawl.Request.options:type_name -> chameleon.smelter.v1.crawl.Request.Options
	15, // 9: chameleon.smelter.v1.crawl.Request.sharingData:type_name -> chameleon.smelter.v1.crawl.Request.SharingDataEntry
	18, // 10: chameleon.smelter.v1.crawl.Item.data:type_name -> google.protobuf.Any
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_chameleon_smelter_v1_crawl_data_proto_init() }
func file_chameleon_smelter_v1_crawl_data_proto_init() {
	if File_chameleon_smelter_v1_crawl_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chameleon_smelter_v1_crawl_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrawlerOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Crawler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrawlerOptions_Cookie); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_data_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Crawler_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_data_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request_Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_data_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chameleon_smelter_v1_crawl_data_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chameleon_smelter_v1_crawl_data_proto_goTypes,
		DependencyIndexes: file_chameleon_smelter_v1_crawl_data_proto_depIdxs,
		EnumInfos:         file_chameleon_smelter_v1_crawl_data_proto_enumTypes,
		MessageInfos:      file_chameleon_smelter_v1_crawl_data_proto_msgTypes,
	}.Build()
	File_chameleon_smelter_v1_crawl_data_proto = out.File
	file_chameleon_smelter_v1_crawl_data_proto_rawDesc = nil
	file_chameleon_smelter_v1_crawl_data_proto_goTypes = nil
	file_chameleon_smelter_v1_crawl_data_proto_depIdxs = nil
}
