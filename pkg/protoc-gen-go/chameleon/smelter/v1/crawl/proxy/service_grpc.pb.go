// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proxy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ProxyManagerClient is the client API for ProxyManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProxyManagerClient interface {
	// DoRequest
	DoRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type proxyManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyManagerClient(cc grpc.ClientConnInterface) ProxyManagerClient {
	return &proxyManagerClient{cc}
}

func (c *proxyManagerClient) DoRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/chameleon.smelter.v1.crawl.proxy.ProxyManager/DoRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProxyManagerServer is the server API for ProxyManager service.
// All implementations must embed UnimplementedProxyManagerServer
// for forward compatibility
type ProxyManagerServer interface {
	// DoRequest
	DoRequest(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedProxyManagerServer()
}

// UnimplementedProxyManagerServer must be embedded to have forward compatible implementations.
type UnimplementedProxyManagerServer struct {
}

func (UnimplementedProxyManagerServer) DoRequest(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoRequest not implemented")
}
func (UnimplementedProxyManagerServer) mustEmbedUnimplementedProxyManagerServer() {}

// UnsafeProxyManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProxyManagerServer will
// result in compilation errors.
type UnsafeProxyManagerServer interface {
	mustEmbedUnimplementedProxyManagerServer()
}

func RegisterProxyManagerServer(s *grpc.Server, srv ProxyManagerServer) {
	s.RegisterService(&_ProxyManager_serviceDesc, srv)
}

func _ProxyManager_DoRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyManagerServer).DoRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chameleon.smelter.v1.crawl.proxy.ProxyManager/DoRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyManagerServer).DoRequest(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProxyManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chameleon.smelter.v1.crawl.proxy.ProxyManager",
	HandlerType: (*ProxyManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoRequest",
			Handler:    _ProxyManager_DoRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chameleon/smelter/v1/crawl/proxy/service.proto",
}
