// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: request.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RequestOptions
type RequestOptions struct {
	// DisableProxy
	DisableProxy bool `protobuf:"varint,1,opt,name=disableProxy,proto3" json:"disableProxy,omitempty" xorm:"option_disable_proxy default(0)"`
	// 最大TTL (in seconds)
	MaxTtlPerRequest int32 `protobuf:"varint,11,opt,name=maxTtlPerRequest,proto3" json:"maxTtlPerRequest,omitempty" xorm:"option_max_ttl_per_request default(0)"`
	// MaxRetryCount
	MaxRetryCount int32 `protobuf:"varint,22,opt,name=maxRetryCount,proto3" json:"maxRetryCount,omitempty" xorm:"option_max_retry_count default(0)"`
	// MaxRequestDepth
	MaxRequestDepth int32 `protobuf:"varint,23,opt,name=maxRequestDepth,proto3" json:"maxRequestDepth,omitempty" xorm:"option_max_request_depth default(0)"`
	// TargetTypes
	TargetTypes string `protobuf:"bytes,24,opt,name=targetTypes,proto3" json:"targetTypes,omitempty" xorm:"option_target_types varchar(256)"`
	// MaxItemCount
	MaxItemCount int32 `protobuf:"varint,25,opt,name=maxItemCount,proto3" json:"maxItemCount,omitempty" xorm:"option_max_item_count default(0)"`
}

func (m *RequestOptions) Reset()         { *m = RequestOptions{} }
func (m *RequestOptions) String() string { return proto.CompactTextString(m) }
func (*RequestOptions) ProtoMessage()    {}
func (*RequestOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f73548e33e655fe, []int{0}
}
func (m *RequestOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestOptions.Merge(m, src)
}
func (m *RequestOptions) XXX_Size() int {
	return m.Size()
}
func (m *RequestOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RequestOptions proto.InternalMessageInfo

func (m *RequestOptions) GetDisableProxy() bool {
	if m != nil {
		return m.DisableProxy
	}
	return false
}

func (m *RequestOptions) GetMaxTtlPerRequest() int32 {
	if m != nil {
		return m.MaxTtlPerRequest
	}
	return 0
}

func (m *RequestOptions) GetMaxRetryCount() int32 {
	if m != nil {
		return m.MaxRetryCount
	}
	return 0
}

func (m *RequestOptions) GetMaxRequestDepth() int32 {
	if m != nil {
		return m.MaxRequestDepth
	}
	return 0
}

func (m *RequestOptions) GetTargetTypes() string {
	if m != nil {
		return m.TargetTypes
	}
	return ""
}

func (m *RequestOptions) GetMaxItemCount() int32 {
	if m != nil {
		return m.MaxItemCount
	}
	return 0
}

// Request
type Request struct {
	// ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" xorm:"varchar(64) pk"`
	// TracingId
	TracingId string `protobuf:"bytes,2,opt,name=tracingId,proto3" json:"tracingId,omitempty" xorm:"varchar(64) index"`
	// JobId
	JobId string `protobuf:"bytes,3,opt,name=jobId,proto3" json:"jobId,omitempty" xorm:"varchar(64) index"`
	// StoreId
	StoreId string `protobuf:"bytes,4,opt,name=storeId,proto3" json:"storeId,omitempty" xorm:"varchar(64) index"`
	// ParentId
	ParentId string `protobuf:"bytes,5,opt,name=parentId,proto3" json:"parentId,omitempty" xorm:"varchar(64)"`
	// Method
	Method string `protobuf:"bytes,12,opt,name=method,proto3" json:"method,omitempty" xorm:"varchar(16)"`
	// URL
	Url string `protobuf:"bytes,13,opt,name=url,proto3" json:"url,omitempty" xorm:"text"`
	// CustomHeaders
	CustomHeaders string `protobuf:"bytes,14,opt,name=customHeaders,proto3" json:"customHeaders,omitempty" xorm:"json"`
	// CustomCookies
	CustomCookies string `protobuf:"bytes,15,opt,name=customCookies,proto3" json:"customCookies,omitempty" xorm:"json"`
	// Body
	Body string `protobuf:"bytes,16,opt,name=body,proto3" json:"body,omitempty"`
	// SharingData 共享数据
	SharingData string `protobuf:"bytes,21,opt,name=sharingData,proto3" json:"sharingData,omitempty" xorm:"json"`
	// 配置参数
	Options *RequestOptions `protobuf:"bytes,50,opt,name=options,proto3" json:"options,omitempty" xorm:"extends"`
	// RetryCount
	RetryCount int32 `protobuf:"varint,51,opt,name=retryCount,proto3" json:"retryCount,omitempty" xorm:"status_retry_count index"`
	// RequestDepth
	RequestDepth int32 `protobuf:"varint,52,opt,name=requestDepth,proto3" json:"requestDepth,omitempty" xorm:"status_request_depth"`
	// StartUtc
	StartUtc int64 `protobuf:"varint,53,opt,name=startUtc,proto3" json:"startUtc,omitempty" xorm:"default(0) index"`
	// EndUtc
	EndUtc int64 `protobuf:"varint,54,opt,name=endUtc,proto3" json:"endUtc,omitempty" xorm:"default(0) index"`
	// Status 1-queued, 2-inprocess, 3-processed
	Status int32 `protobuf:"varint,61,opt,name=status,proto3" json:"status,omitempty" xorm:"default(0) index"`
	// IsSucceed
	IsSucceed bool `protobuf:"varint,62,opt,name=isSucceed,proto3" json:"isSucceed,omitempty" xorm:"default(0) index"`
	// Metadata
	Metadata *Request_Metadata `protobuf:"bytes,101,opt,name=metadata,proto3" json:"metadata,omitempty" xorm:"extends"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f73548e33e655fe, []int{1}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Request) GetTracingId() string {
	if m != nil {
		return m.TracingId
	}
	return ""
}

func (m *Request) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *Request) GetStoreId() string {
	if m != nil {
		return m.StoreId
	}
	return ""
}

func (m *Request) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *Request) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *Request) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Request) GetCustomHeaders() string {
	if m != nil {
		return m.CustomHeaders
	}
	return ""
}

func (m *Request) GetCustomCookies() string {
	if m != nil {
		return m.CustomCookies
	}
	return ""
}

func (m *Request) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *Request) GetSharingData() string {
	if m != nil {
		return m.SharingData
	}
	return ""
}

func (m *Request) GetOptions() *RequestOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *Request) GetRetryCount() int32 {
	if m != nil {
		return m.RetryCount
	}
	return 0
}

func (m *Request) GetRequestDepth() int32 {
	if m != nil {
		return m.RequestDepth
	}
	return 0
}

func (m *Request) GetStartUtc() int64 {
	if m != nil {
		return m.StartUtc
	}
	return 0
}

func (m *Request) GetEndUtc() int64 {
	if m != nil {
		return m.EndUtc
	}
	return 0
}

func (m *Request) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Request) GetIsSucceed() bool {
	if m != nil {
		return m.IsSucceed
	}
	return false
}

func (m *Request) GetMetadata() *Request_Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// Metadata
type Request_Metadata struct {
	// 创建时间
	CreatedUtc int64 `protobuf:"varint,2,opt,name=createdUtc,proto3" json:"createdUtc,omitempty" xorm:"created"`
	// 更新时间
	UpdatedUtc int64 `protobuf:"varint,4,opt,name=updatedUtc,proto3" json:"updatedUtc,omitempty" xorm:"updated"`
	// 是否删除了
	IsDeleted bool `protobuf:"varint,6,opt,name=isDeleted,proto3" json:"isDeleted,omitempty" xorm:"default(false)"`
	// 删除时间
	DeletedUtc int64 `protobuf:"varint,7,opt,name=deletedUtc,proto3" json:"deletedUtc,omitempty"`
}

func (m *Request_Metadata) Reset()         { *m = Request_Metadata{} }
func (m *Request_Metadata) String() string { return proto.CompactTextString(m) }
func (*Request_Metadata) ProtoMessage()    {}
func (*Request_Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f73548e33e655fe, []int{1, 0}
}
func (m *Request_Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request_Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request_Metadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request_Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request_Metadata.Merge(m, src)
}
func (m *Request_Metadata) XXX_Size() int {
	return m.Size()
}
func (m *Request_Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Request_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Request_Metadata proto.InternalMessageInfo

func (m *Request_Metadata) GetCreatedUtc() int64 {
	if m != nil {
		return m.CreatedUtc
	}
	return 0
}

func (m *Request_Metadata) GetUpdatedUtc() int64 {
	if m != nil {
		return m.UpdatedUtc
	}
	return 0
}

func (m *Request_Metadata) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *Request_Metadata) GetDeletedUtc() int64 {
	if m != nil {
		return m.DeletedUtc
	}
	return 0
}

// RequestHistory
type RequestHistory struct {
	// Id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" xorm:"varchar(64) pk"`
	// Timestamp
	Timestamp int64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty" xorm:"pk index"`
	// TracingId
	TracingId string `protobuf:"bytes,3,opt,name=tracingId,proto3" json:"tracingId,omitempty" xorm:"varchar(64) index"`
	// StoreId
	StoreId string `protobuf:"bytes,4,opt,name=storeId,proto3" json:"storeId,omitempty" xorm:"varchar(64) index"`
	// JobId
	JobId string `protobuf:"bytes,5,opt,name=jobId,proto3" json:"jobId,omitempty" xorm:"varchar(64) index"`
	// Code status code or error code
	Code int32 `protobuf:"varint,6,opt,name=code,proto3" json:"code,omitempty" xorm:"index"`
	// ErrMsg
	ErrMsg string `protobuf:"bytes,7,opt,name=errMsg,proto3" json:"errMsg,omitempty" xorm:"text"`
	// Duration
	Duration int32 `protobuf:"varint,10,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *RequestHistory) Reset()         { *m = RequestHistory{} }
func (m *RequestHistory) String() string { return proto.CompactTextString(m) }
func (*RequestHistory) ProtoMessage()    {}
func (*RequestHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f73548e33e655fe, []int{2}
}
func (m *RequestHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestHistory.Merge(m, src)
}
func (m *RequestHistory) XXX_Size() int {
	return m.Size()
}
func (m *RequestHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestHistory.DiscardUnknown(m)
}

var xxx_messageInfo_RequestHistory proto.InternalMessageInfo

func (m *RequestHistory) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RequestHistory) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *RequestHistory) GetTracingId() string {
	if m != nil {
		return m.TracingId
	}
	return ""
}

func (m *RequestHistory) GetStoreId() string {
	if m != nil {
		return m.StoreId
	}
	return ""
}

func (m *RequestHistory) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *RequestHistory) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RequestHistory) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *RequestHistory) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func init() {
	proto.RegisterType((*RequestOptions)(nil), "voiladev.voilacrawl.pkg.types.RequestOptions")
	proto.RegisterType((*Request)(nil), "voiladev.voilacrawl.pkg.types.Request")
	proto.RegisterType((*Request_Metadata)(nil), "voiladev.voilacrawl.pkg.types.Request.Metadata")
	proto.RegisterType((*RequestHistory)(nil), "voiladev.voilacrawl.pkg.types.RequestHistory")
}

func init() { proto.RegisterFile("request.proto", fileDescriptor_7f73548e33e655fe) }

var fileDescriptor_7f73548e33e655fe = []byte{
	// 981 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x96, 0x4f, 0x6f, 0xdb, 0x36,
	0x18, 0xc6, 0xa3, 0x24, 0x4e, 0xec, 0xd7, 0xce, 0x1f, 0x70, 0x68, 0xcb, 0xa6, 0x9b, 0xe5, 0xa9,
	0xc3, 0x6a, 0x77, 0xad, 0xd2, 0x38, 0x4d, 0x8a, 0x15, 0xd8, 0x0e, 0x4e, 0x0e, 0xf5, 0x21, 0x6b,
	0xa1, 0x75, 0xc0, 0xb0, 0x0d, 0x30, 0x68, 0x91, 0xb1, 0xd5, 0x58, 0xa6, 0x46, 0x51, 0x99, 0x7d,
	0xdc, 0xbd, 0x87, 0x7d, 0xac, 0x01, 0xbb, 0xf4, 0xb8, 0x93, 0xb0, 0x25, 0xdf, 0x40, 0xa7, 0x1d,
	0x07, 0x51, 0xb2, 0x2d, 0xc5, 0x5e, 0x96, 0xf6, 0x46, 0x89, 0xbf, 0xe7, 0x21, 0xf9, 0xbe, 0xe2,
	0x63, 0xc3, 0x86, 0x60, 0x3f, 0x07, 0xcc, 0x97, 0xa6, 0x27, 0xb8, 0xe4, 0xe8, 0x93, 0x73, 0xee,
	0x0c, 0x08, 0x65, 0xe7, 0xa6, 0x1a, 0xd8, 0x82, 0xfc, 0x32, 0x30, 0xbd, 0xb3, 0x9e, 0x29, 0xc7,
	0x1e, 0xf3, 0x77, 0x1e, 0xf7, 0x1c, 0xd9, 0x0f, 0xba, 0xa6, 0xcd, 0xdd, 0xdd, 0x1e, 0xef, 0xf1,
	0x5d, 0xa5, 0xea, 0x06, 0xa7, 0xea, 0x49, 0x3d, 0xa8, 0x51, 0xe2, 0x66, 0xbc, 0x5d, 0x85, 0x4d,
	0x2b, 0xf1, 0x7f, 0xe9, 0x49, 0x87, 0x0f, 0x7d, 0xf4, 0x0d, 0x54, 0xa8, 0xe3, 0x93, 0xee, 0x80,
	0xbd, 0x12, 0x7c, 0x34, 0xc6, 0x5a, 0x4d, 0xab, 0x17, 0x5b, 0x0f, 0xa3, 0x50, 0xff, 0x7c, 0xc4,
	0x85, 0xfb, 0xdc, 0xe0, 0x0a, 0xec, 0xa4, 0x50, 0xc7, 0x8b, 0xa9, 0x1a, 0x65, 0xa7, 0x24, 0x18,
	0xc8, 0xfa, 0x93, 0x86, 0x61, 0xe5, 0xf4, 0xe8, 0x27, 0xd8, 0x76, 0xc9, 0xe8, 0xb5, 0x1c, 0xbc,
	0x62, 0x22, 0x5d, 0x0a, 0x97, 0x6b, 0x5a, 0xbd, 0xd0, 0x7a, 0x12, 0x85, 0xfa, 0xa3, 0x9c, 0xa7,
	0x4b, 0x46, 0x1d, 0x29, 0x07, 0x1d, 0x8f, 0x89, 0x4e, 0x7a, 0xec, 0x9c, 0xf3, 0x9c, 0x13, 0xb2,
	0x60, 0xc3, 0x25, 0x23, 0x8b, 0x49, 0x31, 0x3e, 0xe2, 0xc1, 0x50, 0xe2, 0xdb, 0xca, 0xfa, 0x51,
	0x14, 0xea, 0xf5, 0x39, 0x6b, 0x11, 0x63, 0x1d, 0x3b, 0xe6, 0x72, 0xb6, 0x79, 0x0b, 0xf4, 0x3d,
	0x6c, 0xa9, 0x17, 0x6a, 0x85, 0x63, 0xe6, 0xc9, 0x3e, 0xbe, 0xa3, 0x5c, 0xcd, 0x28, 0xd4, 0x1f,
	0x2e, 0x70, 0x55, 0x60, 0x87, 0xc6, 0x64, 0xce, 0xf7, 0xaa, 0x0d, 0x3a, 0x81, 0xb2, 0x24, 0xa2,
	0xc7, 0xe4, 0xeb, 0xb8, 0x59, 0x18, 0xd7, 0xb4, 0x7a, 0xa9, 0xf5, 0x45, 0x14, 0xea, 0x0f, 0x72,
	0xae, 0x09, 0xd3, 0x51, 0x1d, 0xad, 0x9d, 0x13, 0x61, 0xf7, 0x89, 0xa8, 0x37, 0x0f, 0x0e, 0x1b,
	0x86, 0x95, 0xd5, 0xa3, 0x97, 0x50, 0x71, 0xc9, 0xa8, 0x2d, 0x99, 0x9b, 0x9c, 0xfd, 0xae, 0xda,
	0xe5, 0xbc, 0x5f, 0xbc, 0x4b, 0x47, 0x32, 0x77, 0xc1, 0xd1, 0x73, 0x06, 0xc6, 0x5b, 0x80, 0xf5,
	0x49, 0x65, 0x1b, 0xb0, 0xec, 0x50, 0xd5, 0xfd, 0x52, 0xeb, 0x6e, 0x14, 0xea, 0xb7, 0x12, 0xcb,
	0xc9, 0x76, 0x0e, 0x9f, 0x36, 0x6a, 0xde, 0x99, 0x61, 0x2d, 0x3b, 0x14, 0x3d, 0x87, 0x92, 0x14,
	0xc4, 0x76, 0x86, 0xbd, 0x36, 0xc5, 0xcb, 0x4a, 0xf1, 0x71, 0x14, 0xea, 0x78, 0x5e, 0xe1, 0x0c,
	0x29, 0x1b, 0x19, 0xd6, 0x0c, 0x47, 0x4d, 0x28, 0xbc, 0xe1, 0xdd, 0x36, 0xc5, 0x2b, 0x37, 0xd0,
	0x25, 0x28, 0x3a, 0x84, 0x75, 0x5f, 0x72, 0xc1, 0xda, 0x14, 0xaf, 0xde, 0x40, 0x35, 0x81, 0x51,
	0x13, 0x8a, 0x1e, 0x11, 0x6c, 0x28, 0xdb, 0x14, 0x17, 0x94, 0xf0, 0x76, 0x14, 0xea, 0x68, 0x4e,
	0x68, 0x58, 0x53, 0x0e, 0x99, 0xb0, 0xe6, 0x32, 0xd9, 0xe7, 0x14, 0x57, 0xfe, 0x4b, 0xb1, 0x17,
	0x37, 0x26, 0xa5, 0xd0, 0xa7, 0xb0, 0x12, 0x88, 0x01, 0xde, 0x50, 0xf0, 0x56, 0x14, 0xea, 0xe5,
	0x04, 0x96, 0x6c, 0x24, 0x0d, 0x2b, 0x9e, 0x43, 0x07, 0xb0, 0x61, 0x07, 0xbe, 0xe4, 0xee, 0x0b,
	0x46, 0x28, 0x13, 0x3e, 0xde, 0xbc, 0x0a, 0xbf, 0xf1, 0xf9, 0xd0, 0xb0, 0xf2, 0xd4, 0x4c, 0x76,
	0xc4, 0xf9, 0x99, 0xc3, 0x7c, 0xbc, 0x75, 0xad, 0x2c, 0xa5, 0x10, 0x82, 0xd5, 0x2e, 0xa7, 0x63,
	0xbc, 0x1d, 0xd3, 0x96, 0x1a, 0xa3, 0x3d, 0x28, 0xfb, 0x7d, 0x22, 0x9c, 0x61, 0xef, 0x98, 0x48,
	0x82, 0x6f, 0x2d, 0x36, 0xca, 0x32, 0xe8, 0x47, 0x58, 0x4f, 0xbe, 0x26, 0x1f, 0x37, 0x6b, 0x5a,
	0xbd, 0xdc, 0x7c, 0x6c, 0x5e, 0x9b, 0x44, 0x66, 0x3e, 0x56, 0x5a, 0x28, 0x0a, 0xf5, 0xcd, 0xc4,
	0x9d, 0x8d, 0x24, 0x1b, 0x52, 0xdf, 0xb0, 0x26, 0x8e, 0xe8, 0x08, 0x40, 0xcc, 0xae, 0xf0, 0xbe,
	0xfa, 0x8c, 0xef, 0x47, 0xa1, 0xae, 0x27, 0x02, 0x5f, 0x12, 0x19, 0xf8, 0xb9, 0xeb, 0x9b, 0xb6,
	0x36, 0x23, 0x43, 0x47, 0x50, 0x11, 0xd9, 0x3b, 0xfb, 0x54, 0xd9, 0xe8, 0x51, 0xa8, 0xdf, 0xbb,
	0x62, 0x93, 0xb9, 0xaf, 0x86, 0x95, 0x13, 0xa1, 0x67, 0x50, 0xf4, 0x25, 0x11, 0xf2, 0x3b, 0x69,
	0xe3, 0x83, 0x9a, 0x56, 0x5f, 0x69, 0xdd, 0x8b, 0x42, 0xfd, 0x4e, 0x62, 0x30, 0xbb, 0x38, 0x93,
	0xf5, 0xa7, 0x30, 0xda, 0x87, 0x35, 0x36, 0xa4, 0xb1, 0xec, 0xf0, 0xff, 0x65, 0x29, 0x1a, 0x8b,
	0x92, 0x4d, 0xe1, 0xaf, 0xd4, 0x66, 0xaf, 0x17, 0x25, 0x28, 0xfa, 0x12, 0x4a, 0x8e, 0xff, 0x6d,
	0x60, 0xdb, 0x8c, 0x51, 0xfc, 0xb5, 0x4a, 0xe7, 0x6b, 0x75, 0x33, 0x1a, 0x75, 0xa0, 0xe8, 0x32,
	0x49, 0x68, 0xdc, 0x74, 0xa6, 0xba, 0xb8, 0x7b, 0xb3, 0x2e, 0x9a, 0x27, 0xa9, 0x6c, 0x61, 0x1f,
	0xa7, 0xa6, 0x3b, 0x7f, 0x68, 0x50, 0x9c, 0xa0, 0xa8, 0x09, 0x60, 0x0b, 0x46, 0x24, 0x53, 0x65,
	0x59, 0x56, 0x65, 0xc9, 0xc8, 0xd3, 0x39, 0xc3, 0xca, 0x50, 0xb1, 0x26, 0xf0, 0xe8, 0x44, 0xb3,
	0x7a, 0x55, 0x93, 0xce, 0x19, 0x56, 0x86, 0x42, 0xcf, 0xe2, 0x82, 0x1c, 0xb3, 0x01, 0x93, 0x8c,
	0xe2, 0x35, 0x55, 0x90, 0x4c, 0x60, 0x4d, 0x0a, 0x72, 0x4a, 0x06, 0x3e, 0x6b, 0xa8, 0x72, 0xa4,
	0x2c, 0xaa, 0x02, 0xd0, 0x64, 0x18, 0x2f, 0xb6, 0x1e, 0x2f, 0x66, 0x65, 0xde, 0x18, 0xbf, 0xae,
	0x4c, 0x7f, 0x1d, 0x5f, 0x38, 0x71, 0x88, 0x8c, 0xdf, 0x27, 0x15, 0xf7, 0xa0, 0x24, 0x1d, 0x97,
	0xf9, 0x92, 0xb8, 0x5e, 0x7a, 0xfa, 0x8f, 0xa2, 0x50, 0xdf, 0x4a, 0x14, 0xde, 0xd9, 0x2c, 0x0c,
	0x27, 0x54, 0x3e, 0x48, 0x57, 0xde, 0x2f, 0x48, 0x3f, 0x3c, 0x14, 0xd3, 0x00, 0x2e, 0xdc, 0x3c,
	0x80, 0x3f, 0x83, 0x55, 0x9b, 0x53, 0xa6, 0x8a, 0x5d, 0x68, 0x6d, 0x47, 0xa1, 0x5e, 0x49, 0x24,
	0x29, 0xa6, 0x66, 0xd1, 0x03, 0x58, 0x63, 0x42, 0x9c, 0xf8, 0x3d, 0x55, 0xda, 0x05, 0x69, 0x98,
	0x4e, 0xa3, 0x1d, 0x28, 0xd2, 0x40, 0x90, 0x38, 0x0b, 0x30, 0xc4, 0x96, 0xd6, 0xf4, 0xb9, 0x75,
	0xff, 0x9f, 0xbf, 0xab, 0xda, 0xef, 0x17, 0x55, 0xed, 0xdd, 0x45, 0x55, 0xfb, 0xeb, 0xa2, 0xaa,
	0xfd, 0x76, 0x59, 0x5d, 0x7a, 0x77, 0x59, 0x5d, 0xfa, 0xf3, 0xb2, 0xba, 0xf4, 0x43, 0x41, 0x7d,
	0xa5, 0xdd, 0x35, 0xf5, 0x6f, 0x66, 0xff, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x16, 0xa6, 0x34,
	0xd3, 0x2c, 0x09, 0x00, 0x00,
}

func (m *RequestOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxItemCount != 0 {
		i = encodeVarintRequest(dAtA, i, uint64(m.MaxItemCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if len(m.TargetTypes) > 0 {
		i -= len(m.TargetTypes)
		copy(dAtA[i:], m.TargetTypes)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.TargetTypes)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.MaxRequestDepth != 0 {
		i = encodeVarintRequest(dAtA, i, uint64(m.MaxRequestDepth))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.MaxRetryCount != 0 {
		i = encodeVarintRequest(dAtA, i, uint64(m.MaxRetryCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.MaxTtlPerRequest != 0 {
		i = encodeVarintRequest(dAtA, i, uint64(m.MaxTtlPerRequest))
		i--
		dAtA[i] = 0x58
	}
	if m.DisableProxy {
		i--
		if m.DisableProxy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if m.IsSucceed {
		i--
		if m.IsSucceed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf0
	}
	if m.Status != 0 {
		i = encodeVarintRequest(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe8
	}
	if m.EndUtc != 0 {
		i = encodeVarintRequest(dAtA, i, uint64(m.EndUtc))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.StartUtc != 0 {
		i = encodeVarintRequest(dAtA, i, uint64(m.StartUtc))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.RequestDepth != 0 {
		i = encodeVarintRequest(dAtA, i, uint64(m.RequestDepth))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.RetryCount != 0 {
		i = encodeVarintRequest(dAtA, i, uint64(m.RetryCount))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	if m.Options != nil {
		{
			size, err := m.Options.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	if len(m.SharingData) > 0 {
		i -= len(m.SharingData)
		copy(dAtA[i:], m.SharingData)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.SharingData)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.CustomCookies) > 0 {
		i -= len(m.CustomCookies)
		copy(dAtA[i:], m.CustomCookies)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.CustomCookies)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.CustomHeaders) > 0 {
		i -= len(m.CustomHeaders)
		copy(dAtA[i:], m.CustomHeaders)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.CustomHeaders)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.ParentId) > 0 {
		i -= len(m.ParentId)
		copy(dAtA[i:], m.ParentId)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.ParentId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StoreId) > 0 {
		i -= len(m.StoreId)
		copy(dAtA[i:], m.StoreId)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.StoreId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.JobId) > 0 {
		i -= len(m.JobId)
		copy(dAtA[i:], m.JobId)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.JobId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TracingId) > 0 {
		i -= len(m.TracingId)
		copy(dAtA[i:], m.TracingId)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.TracingId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Request_Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request_Metadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request_Metadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeletedUtc != 0 {
		i = encodeVarintRequest(dAtA, i, uint64(m.DeletedUtc))
		i--
		dAtA[i] = 0x38
	}
	if m.IsDeleted {
		i--
		if m.IsDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.UpdatedUtc != 0 {
		i = encodeVarintRequest(dAtA, i, uint64(m.UpdatedUtc))
		i--
		dAtA[i] = 0x20
	}
	if m.CreatedUtc != 0 {
		i = encodeVarintRequest(dAtA, i, uint64(m.CreatedUtc))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *RequestHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		i = encodeVarintRequest(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x50
	}
	if len(m.ErrMsg) > 0 {
		i -= len(m.ErrMsg)
		copy(dAtA[i:], m.ErrMsg)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.ErrMsg)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Code != 0 {
		i = encodeVarintRequest(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x30
	}
	if len(m.JobId) > 0 {
		i -= len(m.JobId)
		copy(dAtA[i:], m.JobId)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.JobId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StoreId) > 0 {
		i -= len(m.StoreId)
		copy(dAtA[i:], m.StoreId)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.StoreId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TracingId) > 0 {
		i -= len(m.TracingId)
		copy(dAtA[i:], m.TracingId)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.TracingId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Timestamp != 0 {
		i = encodeVarintRequest(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRequest(dAtA []byte, offset int, v uint64) int {
	offset -= sovRequest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedRequestOptions(r randyRequest, easy bool) *RequestOptions {
	this := &RequestOptions{}
	this.DisableProxy = bool(bool(r.Intn(2) == 0))
	this.MaxTtlPerRequest = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.MaxTtlPerRequest *= -1
	}
	this.MaxRetryCount = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.MaxRetryCount *= -1
	}
	this.MaxRequestDepth = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.MaxRequestDepth *= -1
	}
	this.TargetTypes = string(randStringRequest(r))
	this.MaxItemCount = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.MaxItemCount *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRequest(r randyRequest, easy bool) *Request {
	this := &Request{}
	this.Id = string(randStringRequest(r))
	this.TracingId = string(randStringRequest(r))
	this.JobId = string(randStringRequest(r))
	this.StoreId = string(randStringRequest(r))
	this.ParentId = string(randStringRequest(r))
	this.Method = string(randStringRequest(r))
	this.Url = string(randStringRequest(r))
	this.CustomHeaders = string(randStringRequest(r))
	this.CustomCookies = string(randStringRequest(r))
	this.Body = string(randStringRequest(r))
	this.SharingData = string(randStringRequest(r))
	if r.Intn(5) != 0 {
		this.Options = NewPopulatedRequestOptions(r, easy)
	}
	this.RetryCount = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.RetryCount *= -1
	}
	this.RequestDepth = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.RequestDepth *= -1
	}
	this.StartUtc = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.StartUtc *= -1
	}
	this.EndUtc = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.EndUtc *= -1
	}
	this.Status = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Status *= -1
	}
	this.IsSucceed = bool(bool(r.Intn(2) == 0))
	if r.Intn(5) != 0 {
		this.Metadata = NewPopulatedRequest_Metadata(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRequest_Metadata(r randyRequest, easy bool) *Request_Metadata {
	this := &Request_Metadata{}
	this.CreatedUtc = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.CreatedUtc *= -1
	}
	this.UpdatedUtc = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UpdatedUtc *= -1
	}
	this.IsDeleted = bool(bool(r.Intn(2) == 0))
	this.DeletedUtc = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.DeletedUtc *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRequestHistory(r randyRequest, easy bool) *RequestHistory {
	this := &RequestHistory{}
	this.Id = string(randStringRequest(r))
	this.Timestamp = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Timestamp *= -1
	}
	this.TracingId = string(randStringRequest(r))
	this.StoreId = string(randStringRequest(r))
	this.JobId = string(randStringRequest(r))
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.ErrMsg = string(randStringRequest(r))
	this.Duration = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Duration *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyRequest interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneRequest(r randyRequest) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringRequest(r randyRequest) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneRequest(r)
	}
	return string(tmps)
}
func randUnrecognizedRequest(r randyRequest, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldRequest(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldRequest(dAtA []byte, r randyRequest, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateRequest(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateRequest(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateRequest(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateRequest(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateRequest(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateRequest(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateRequest(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *RequestOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableProxy {
		n += 2
	}
	if m.MaxTtlPerRequest != 0 {
		n += 1 + sovRequest(uint64(m.MaxTtlPerRequest))
	}
	if m.MaxRetryCount != 0 {
		n += 2 + sovRequest(uint64(m.MaxRetryCount))
	}
	if m.MaxRequestDepth != 0 {
		n += 2 + sovRequest(uint64(m.MaxRequestDepth))
	}
	l = len(m.TargetTypes)
	if l > 0 {
		n += 2 + l + sovRequest(uint64(l))
	}
	if m.MaxItemCount != 0 {
		n += 2 + sovRequest(uint64(m.MaxItemCount))
	}
	return n
}

func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	l = len(m.TracingId)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	l = len(m.StoreId)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	l = len(m.ParentId)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	l = len(m.CustomHeaders)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	l = len(m.CustomCookies)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 2 + l + sovRequest(uint64(l))
	}
	l = len(m.SharingData)
	if l > 0 {
		n += 2 + l + sovRequest(uint64(l))
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 2 + l + sovRequest(uint64(l))
	}
	if m.RetryCount != 0 {
		n += 2 + sovRequest(uint64(m.RetryCount))
	}
	if m.RequestDepth != 0 {
		n += 2 + sovRequest(uint64(m.RequestDepth))
	}
	if m.StartUtc != 0 {
		n += 2 + sovRequest(uint64(m.StartUtc))
	}
	if m.EndUtc != 0 {
		n += 2 + sovRequest(uint64(m.EndUtc))
	}
	if m.Status != 0 {
		n += 2 + sovRequest(uint64(m.Status))
	}
	if m.IsSucceed {
		n += 3
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 2 + l + sovRequest(uint64(l))
	}
	return n
}

func (m *Request_Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreatedUtc != 0 {
		n += 1 + sovRequest(uint64(m.CreatedUtc))
	}
	if m.UpdatedUtc != 0 {
		n += 1 + sovRequest(uint64(m.UpdatedUtc))
	}
	if m.IsDeleted {
		n += 2
	}
	if m.DeletedUtc != 0 {
		n += 1 + sovRequest(uint64(m.DeletedUtc))
	}
	return n
}

func (m *RequestHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovRequest(uint64(m.Timestamp))
	}
	l = len(m.TracingId)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	l = len(m.StoreId)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovRequest(uint64(m.Code))
	}
	l = len(m.ErrMsg)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovRequest(uint64(m.Duration))
	}
	return n
}

func sovRequest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRequest(x uint64) (n int) {
	return sovRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RequestOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableProxy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableProxy = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTtlPerRequest", wireType)
			}
			m.MaxTtlPerRequest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTtlPerRequest |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRetryCount", wireType)
			}
			m.MaxRetryCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRetryCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRequestDepth", wireType)
			}
			m.MaxRequestDepth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRequestDepth |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetTypes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxItemCount", wireType)
			}
			m.MaxItemCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxItemCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TracingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TracingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomHeaders", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomHeaders = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomCookies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomCookies = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharingData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SharingData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &RequestOptions{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryCount", wireType)
			}
			m.RetryCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetryCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestDepth", wireType)
			}
			m.RequestDepth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestDepth |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartUtc", wireType)
			}
			m.StartUtc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartUtc |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndUtc", wireType)
			}
			m.EndUtc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndUtc |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 61:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 62:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSucceed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSucceed = bool(v != 0)
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &Request_Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request_Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedUtc", wireType)
			}
			m.CreatedUtc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedUtc |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedUtc", wireType)
			}
			m.UpdatedUtc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedUtc |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDeleted = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedUtc", wireType)
			}
			m.DeletedUtc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeletedUtc |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TracingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TracingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRequest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRequest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRequest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRequest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRequest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRequest = fmt.Errorf("proto: unexpected end of group")
)
