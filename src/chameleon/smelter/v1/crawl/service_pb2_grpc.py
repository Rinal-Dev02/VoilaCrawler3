# encoding=utf8
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from chameleon.smelter.v1.crawl import data_pb2 as chameleon_dot_smelter_dot_v1_dot_crawl_dot_data__pb2
from chameleon.smelter.v1.crawl import service_message_pb2 as chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2
from google.protobuf import any_pb2 as google_dot_protobuf_dot_any__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class CrawlerNodeStub(object):
    """CrawlerNode
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Version = channel.unary_unary(
                '/chameleon.smelter.v1.crawl.CrawlerNode/Version',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.VersionResponse.FromString,
                )
        self.CrawlerOptions = channel.unary_unary(
                '/chameleon.smelter.v1.crawl.CrawlerNode/CrawlerOptions',
                request_serializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.CrawlerOptionsRequest.SerializeToString,
                response_deserializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.CrawlerOptionsResponse.FromString,
                )
        self.AllowedDomains = channel.unary_unary(
                '/chameleon.smelter.v1.crawl.CrawlerNode/AllowedDomains',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.AllowedDomainsResponse.FromString,
                )
        self.CanonicalUrl = channel.unary_unary(
                '/chameleon.smelter.v1.crawl.CrawlerNode/CanonicalUrl',
                request_serializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.CanonicalUrlRequest.SerializeToString,
                response_deserializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.CanonicalUrlResponse.FromString,
                )
        self.Parse = channel.unary_stream(
                '/chameleon.smelter.v1.crawl.CrawlerNode/Parse',
                request_serializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_data__pb2.Request.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_any__pb2.Any.FromString,
                )
        self.Call = channel.unary_unary(
                '/chameleon.smelter.v1.crawl.CrawlerNode/Call',
                request_serializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.CallRequest.SerializeToString,
                response_deserializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.CallResponse.FromString,
                )


class CrawlerNodeServicer(object):
    """CrawlerNode
    """

    def Version(self, request, context):
        """Version
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CrawlerOptions(self, request, context):
        """CrawlerOptions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AllowedDomains(self, request, context):
        """AllowedDomains
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CanonicalUrl(self, request, context):
        """CanonicalUrl
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Parse(self, request, context):
        """Parse
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Call(self, request, context):
        """Call used to get categories, brands
        NOTE: this api may be non-real time.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CrawlerNodeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Version': grpc.unary_unary_rpc_method_handler(
                    servicer.Version,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.VersionResponse.SerializeToString,
            ),
            'CrawlerOptions': grpc.unary_unary_rpc_method_handler(
                    servicer.CrawlerOptions,
                    request_deserializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.CrawlerOptionsRequest.FromString,
                    response_serializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.CrawlerOptionsResponse.SerializeToString,
            ),
            'AllowedDomains': grpc.unary_unary_rpc_method_handler(
                    servicer.AllowedDomains,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.AllowedDomainsResponse.SerializeToString,
            ),
            'CanonicalUrl': grpc.unary_unary_rpc_method_handler(
                    servicer.CanonicalUrl,
                    request_deserializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.CanonicalUrlRequest.FromString,
                    response_serializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.CanonicalUrlResponse.SerializeToString,
            ),
            'Parse': grpc.unary_stream_rpc_method_handler(
                    servicer.Parse,
                    request_deserializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_data__pb2.Request.FromString,
                    response_serializer=google_dot_protobuf_dot_any__pb2.Any.SerializeToString,
            ),
            'Call': grpc.unary_unary_rpc_method_handler(
                    servicer.Call,
                    request_deserializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.CallRequest.FromString,
                    response_serializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.CallResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chameleon.smelter.v1.crawl.CrawlerNode', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CrawlerNode(object):
    """CrawlerNode
    """

    @staticmethod
    def Version(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chameleon.smelter.v1.crawl.CrawlerNode/Version',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.VersionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CrawlerOptions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chameleon.smelter.v1.crawl.CrawlerNode/CrawlerOptions',
            chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.CrawlerOptionsRequest.SerializeToString,
            chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.CrawlerOptionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AllowedDomains(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chameleon.smelter.v1.crawl.CrawlerNode/AllowedDomains',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.AllowedDomainsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CanonicalUrl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chameleon.smelter.v1.crawl.CrawlerNode/CanonicalUrl',
            chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.CanonicalUrlRequest.SerializeToString,
            chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.CanonicalUrlResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Parse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/chameleon.smelter.v1.crawl.CrawlerNode/Parse',
            chameleon_dot_smelter_dot_v1_dot_crawl_dot_data__pb2.Request.SerializeToString,
            google_dot_protobuf_dot_any__pb2.Any.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Call(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chameleon.smelter.v1.crawl.CrawlerNode/Call',
            chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.CallRequest.SerializeToString,
            chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.CallResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CrawlerRegisterStub(object):
    """CrawlerRegister
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Connect = channel.stream_stream(
                '/chameleon.smelter.v1.crawl.CrawlerRegister/Connect',
                request_serializer=google_dot_protobuf_dot_any__pb2.Any.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_any__pb2.Any.FromString,
                )


class CrawlerRegisterServicer(object):
    """CrawlerRegister
    """

    def Connect(self, request_iterator, context):
        """Connect
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CrawlerRegisterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Connect': grpc.stream_stream_rpc_method_handler(
                    servicer.Connect,
                    request_deserializer=google_dot_protobuf_dot_any__pb2.Any.FromString,
                    response_serializer=google_dot_protobuf_dot_any__pb2.Any.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chameleon.smelter.v1.crawl.CrawlerRegister', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CrawlerRegister(object):
    """CrawlerRegister
    """

    @staticmethod
    def Connect(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/chameleon.smelter.v1.crawl.CrawlerRegister/Connect',
            google_dot_protobuf_dot_any__pb2.Any.SerializeToString,
            google_dot_protobuf_dot_any__pb2.Any.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CrawlerManagerStub(object):
    """CrawlerManager
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCrawlers = channel.unary_unary(
                '/chameleon.smelter.v1.crawl.CrawlerManager/GetCrawlers',
                request_serializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCrawlersRequest.SerializeToString,
                response_deserializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCrawlersResponse.FromString,
                )
        self.GetCrawler = channel.unary_unary(
                '/chameleon.smelter.v1.crawl.CrawlerManager/GetCrawler',
                request_serializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCrawlerRequest.SerializeToString,
                response_deserializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCrawlerResponse.FromString,
                )
        self.GetCrawlerOptions = channel.unary_unary(
                '/chameleon.smelter.v1.crawl.CrawlerManager/GetCrawlerOptions',
                request_serializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCrawlerOptionsRequest.SerializeToString,
                response_deserializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCrawlerOptionsResponse.FromString,
                )
        self.GetCanonicalUrl = channel.unary_unary(
                '/chameleon.smelter.v1.crawl.CrawlerManager/GetCanonicalUrl',
                request_serializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCanonicalUrlRequest.SerializeToString,
                response_deserializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCanonicalUrlResponse.FromString,
                )
        self.DoParse = channel.unary_unary(
                '/chameleon.smelter.v1.crawl.CrawlerManager/DoParse',
                request_serializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.DoParseRequest.SerializeToString,
                response_deserializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.DoParseResponse.FromString,
                )
        self.RemoteCall = channel.unary_unary(
                '/chameleon.smelter.v1.crawl.CrawlerManager/RemoteCall',
                request_serializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.RemoteCallRequest.SerializeToString,
                response_deserializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.RemoteCallResponse.FromString,
                )


class CrawlerManagerServicer(object):
    """CrawlerManager
    """

    def GetCrawlers(self, request, context):
        """Crawlers
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCrawler(self, request, context):
        """GetCrawler 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCrawlerOptions(self, request, context):
        """GetCrawlerOptions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCanonicalUrl(self, request, context):
        """GetCanonicalUrl
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DoParse(self, request, context):
        """抓取 @desc 提交URL地址
        对于不同情况下，抓取的数据响应处理方式不同;
        对于定时抓取任务，或者全库抓取任务，抓取数据通过MQ提交给处理逻辑

        任何一个实现了该接口的爬虫服务，都需要将在服务启动后将自身的爬虫信息
        提交给爬虫管理中心；具体的数据格式见`CrawlerController`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoteCall(self, request, context):
        """RemoteCall
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CrawlerManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCrawlers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCrawlers,
                    request_deserializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCrawlersRequest.FromString,
                    response_serializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCrawlersResponse.SerializeToString,
            ),
            'GetCrawler': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCrawler,
                    request_deserializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCrawlerRequest.FromString,
                    response_serializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCrawlerResponse.SerializeToString,
            ),
            'GetCrawlerOptions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCrawlerOptions,
                    request_deserializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCrawlerOptionsRequest.FromString,
                    response_serializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCrawlerOptionsResponse.SerializeToString,
            ),
            'GetCanonicalUrl': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCanonicalUrl,
                    request_deserializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCanonicalUrlRequest.FromString,
                    response_serializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCanonicalUrlResponse.SerializeToString,
            ),
            'DoParse': grpc.unary_unary_rpc_method_handler(
                    servicer.DoParse,
                    request_deserializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.DoParseRequest.FromString,
                    response_serializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.DoParseResponse.SerializeToString,
            ),
            'RemoteCall': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoteCall,
                    request_deserializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.RemoteCallRequest.FromString,
                    response_serializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.RemoteCallResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chameleon.smelter.v1.crawl.CrawlerManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CrawlerManager(object):
    """CrawlerManager
    """

    @staticmethod
    def GetCrawlers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chameleon.smelter.v1.crawl.CrawlerManager/GetCrawlers',
            chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCrawlersRequest.SerializeToString,
            chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCrawlersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCrawler(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chameleon.smelter.v1.crawl.CrawlerManager/GetCrawler',
            chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCrawlerRequest.SerializeToString,
            chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCrawlerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCrawlerOptions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chameleon.smelter.v1.crawl.CrawlerManager/GetCrawlerOptions',
            chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCrawlerOptionsRequest.SerializeToString,
            chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCrawlerOptionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCanonicalUrl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chameleon.smelter.v1.crawl.CrawlerManager/GetCanonicalUrl',
            chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCanonicalUrlRequest.SerializeToString,
            chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCanonicalUrlResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DoParse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chameleon.smelter.v1.crawl.CrawlerManager/DoParse',
            chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.DoParseRequest.SerializeToString,
            chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.DoParseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoteCall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chameleon.smelter.v1.crawl.CrawlerManager/RemoteCall',
            chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.RemoteCallRequest.SerializeToString,
            chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.RemoteCallResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class GatewayStub(object):
    """Gateway
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCrawlers = channel.unary_unary(
                '/chameleon.smelter.v1.crawl.Gateway/GetCrawlers',
                request_serializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCrawlersRequest.SerializeToString,
                response_deserializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCrawlersResponse.FromString,
                )
        self.GetCrawler = channel.unary_unary(
                '/chameleon.smelter.v1.crawl.Gateway/GetCrawler',
                request_serializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCrawlerRequest.SerializeToString,
                response_deserializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCrawlerResponse.FromString,
                )
        self.GetCanonicalUrl = channel.unary_unary(
                '/chameleon.smelter.v1.crawl.Gateway/GetCanonicalUrl',
                request_serializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCanonicalUrlRequest.SerializeToString,
                response_deserializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCanonicalUrlResponse.FromString,
                )
        self.Fetch = channel.unary_unary(
                '/chameleon.smelter.v1.crawl.Gateway/Fetch',
                request_serializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.FetchRequest.SerializeToString,
                response_deserializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.FetchResponse.FromString,
                )
        self.GetRequest = channel.unary_unary(
                '/chameleon.smelter.v1.crawl.Gateway/GetRequest',
                request_serializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetRequestRequest.SerializeToString,
                response_deserializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetRequestResponse.FromString,
                )
        self.GetCrawlerLogs = channel.unary_unary(
                '/chameleon.smelter.v1.crawl.Gateway/GetCrawlerLogs',
                request_serializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCrawlerLogsRequest.SerializeToString,
                response_deserializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCrawlerLogsResponse.FromString,
                )


class GatewayServicer(object):
    """Gateway
    """

    def GetCrawlers(self, request, context):
        """Crawlers
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCrawler(self, request, context):
        """GetCrawler 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCanonicalUrl(self, request, context):
        """GetCanonicalUrl
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Fetch(self, request, context):
        """抓取 @desc 提交URL地址
        对于不同情况下，抓取的数据响应处理方式不同;
        对于定时抓取任务，或者全库抓取任务，抓取数据通过MQ提交给处理逻辑
        对于及时抓取，比如获取商品的价格，直接返回结果

        任何一个实现了该接口的爬虫服务，都需要将在服务启动后将自身的爬虫信息
        提交给爬虫管理中心；具体的数据格式见`CrawlerController`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRequest(self, request, context):
        """GetRequest
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCrawlerLogs(self, request, context):
        """GetCrawlerLogs 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GatewayServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCrawlers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCrawlers,
                    request_deserializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCrawlersRequest.FromString,
                    response_serializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCrawlersResponse.SerializeToString,
            ),
            'GetCrawler': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCrawler,
                    request_deserializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCrawlerRequest.FromString,
                    response_serializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCrawlerResponse.SerializeToString,
            ),
            'GetCanonicalUrl': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCanonicalUrl,
                    request_deserializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCanonicalUrlRequest.FromString,
                    response_serializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCanonicalUrlResponse.SerializeToString,
            ),
            'Fetch': grpc.unary_unary_rpc_method_handler(
                    servicer.Fetch,
                    request_deserializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.FetchRequest.FromString,
                    response_serializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.FetchResponse.SerializeToString,
            ),
            'GetRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRequest,
                    request_deserializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetRequestRequest.FromString,
                    response_serializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetRequestResponse.SerializeToString,
            ),
            'GetCrawlerLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCrawlerLogs,
                    request_deserializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCrawlerLogsRequest.FromString,
                    response_serializer=chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCrawlerLogsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chameleon.smelter.v1.crawl.Gateway', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Gateway(object):
    """Gateway
    """

    @staticmethod
    def GetCrawlers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chameleon.smelter.v1.crawl.Gateway/GetCrawlers',
            chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCrawlersRequest.SerializeToString,
            chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCrawlersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCrawler(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chameleon.smelter.v1.crawl.Gateway/GetCrawler',
            chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCrawlerRequest.SerializeToString,
            chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCrawlerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCanonicalUrl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chameleon.smelter.v1.crawl.Gateway/GetCanonicalUrl',
            chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCanonicalUrlRequest.SerializeToString,
            chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCanonicalUrlResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Fetch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chameleon.smelter.v1.crawl.Gateway/Fetch',
            chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.FetchRequest.SerializeToString,
            chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.FetchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chameleon.smelter.v1.crawl.Gateway/GetRequest',
            chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetRequestRequest.SerializeToString,
            chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetRequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCrawlerLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chameleon.smelter.v1.crawl.Gateway/GetCrawlerLogs',
            chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCrawlerLogsRequest.SerializeToString,
            chameleon_dot_smelter_dot_v1_dot_crawl_dot_service__message__pb2.GetCrawlerLogsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
