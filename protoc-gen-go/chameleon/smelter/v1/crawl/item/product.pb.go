// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: chameleon/smelter/v1/crawl/item/product.proto

package item

import (

	media "github.com/voiladev/VoilaCrawl/protoc-gen-go/chameleon/api/media"
	regulation "github.com/voiladev/VoilaCrawl/protoc-gen-go/chameleon/api/regulation"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SkuSpecType
type SkuSpecType int32

const (
	// SKU Size
	SkuSpecType_SkuSpecUnknown SkuSpecType = 0
	// SKU Size
	SkuSpecType_SkuSpecSize SkuSpecType = 1
	// SKU Color
	SkuSpecType_SkuSpecColor SkuSpecType = 2
)

// Enum value maps for SkuSpecType.
var (
	SkuSpecType_name = map[int32]string{
		0: "SkuSpecUnknown",
		1: "SkuSpecSize",
		2: "SkuSpecColor",
	}
	SkuSpecType_value = map[string]int32{
		"SkuSpecUnknown": 0,
		"SkuSpecSize":    1,
		"SkuSpecColor":   2,
	}
)

func (x SkuSpecType) Enum() *SkuSpecType {
	p := new(SkuSpecType)
	*p = x
	return p
}

func (x SkuSpecType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SkuSpecType) Descriptor() protoreflect.EnumDescriptor {
	return file_chameleon_smelter_v1_crawl_item_product_proto_enumTypes[0].Descriptor()
}

func (SkuSpecType) Type() protoreflect.EnumType {
	return &file_chameleon_smelter_v1_crawl_item_product_proto_enumTypes[0]
}

func (x SkuSpecType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SkuSpecType.Descriptor instead.
func (SkuSpecType) EnumDescriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_item_product_proto_rawDescGZIP(), []int{0}
}

// Type
type Stock_StockStatus int32

const (
	// Unknown
	Stock_StockStatusUnknown Stock_StockStatus = 0
	// InStock
	Stock_InStock Stock_StockStatus = 1
	// // LowInStock
	// LowStock         = 2;
	// OutOfStock
	Stock_OutOfStock Stock_StockStatus = 10
)

// Enum value maps for Stock_StockStatus.
var (
	Stock_StockStatus_name = map[int32]string{
		0:  "StockStatusUnknown",
		1:  "InStock",
		10: "OutOfStock",
	}
	Stock_StockStatus_value = map[string]int32{
		"StockStatusUnknown": 0,
		"InStock":            1,
		"OutOfStock":         10,
	}
)

func (x Stock_StockStatus) Enum() *Stock_StockStatus {
	p := new(Stock_StockStatus)
	*p = x
	return p
}

func (x Stock_StockStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Stock_StockStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_chameleon_smelter_v1_crawl_item_product_proto_enumTypes[1].Descriptor()
}

func (Stock_StockStatus) Type() protoreflect.EnumType {
	return &file_chameleon_smelter_v1_crawl_item_product_proto_enumTypes[1]
}

func (x Stock_StockStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Stock_StockStatus.Descriptor instead.
func (Stock_StockStatus) EnumDescriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_item_product_proto_rawDescGZIP(), []int{3, 0}
}

// PromoCodeType
type PromoCode_PromoCodeType int32

const (
	// CodeTypeUnknown
	PromoCode_CodeTypeUnknown PromoCode_PromoCodeType = 0
	// ProductCode
	PromoCode_ProductCode PromoCode_PromoCodeType = 1
	// DeliveryCode
	PromoCode_DeliveryCode PromoCode_PromoCodeType = 2
)

// Enum value maps for PromoCode_PromoCodeType.
var (
	PromoCode_PromoCodeType_name = map[int32]string{
		0: "CodeTypeUnknown",
		1: "ProductCode",
		2: "DeliveryCode",
	}
	PromoCode_PromoCodeType_value = map[string]int32{
		"CodeTypeUnknown": 0,
		"ProductCode":     1,
		"DeliveryCode":    2,
	}
)

func (x PromoCode_PromoCodeType) Enum() *PromoCode_PromoCodeType {
	p := new(PromoCode_PromoCodeType)
	*p = x
	return p
}

func (x PromoCode_PromoCodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PromoCode_PromoCodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_chameleon_smelter_v1_crawl_item_product_proto_enumTypes[2].Descriptor()
}

func (PromoCode_PromoCodeType) Type() protoreflect.EnumType {
	return &file_chameleon_smelter_v1_crawl_item_product_proto_enumTypes[2]
}

func (x PromoCode_PromoCodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PromoCode_PromoCodeType.Descriptor instead.
func (PromoCode_PromoCodeType) EnumDescriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_item_product_proto_rawDescGZIP(), []int{10, 0}
}

// ApplyType
type PromoCode_ApplyType int32

const (
	// ApplyUnknown
	PromoCode_ApplyUnknown PromoCode_ApplyType = 0
	// ApplyToCategory
	PromoCode_ApplyToCategory PromoCode_ApplyType = 1
	// ApplyToCategories
	PromoCode_ApplyToCategories PromoCode_ApplyType = 2
	// 应用所有
	PromoCode_ApplyToAll PromoCode_ApplyType = 3
)

// Enum value maps for PromoCode_ApplyType.
var (
	PromoCode_ApplyType_name = map[int32]string{
		0: "ApplyUnknown",
		1: "ApplyToCategory",
		2: "ApplyToCategories",
		3: "ApplyToAll",
	}
	PromoCode_ApplyType_value = map[string]int32{
		"ApplyUnknown":      0,
		"ApplyToCategory":   1,
		"ApplyToCategories": 2,
		"ApplyToAll":        3,
	}
)

func (x PromoCode_ApplyType) Enum() *PromoCode_ApplyType {
	p := new(PromoCode_ApplyType)
	*p = x
	return p
}

func (x PromoCode_ApplyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PromoCode_ApplyType) Descriptor() protoreflect.EnumDescriptor {
	return file_chameleon_smelter_v1_crawl_item_product_proto_enumTypes[3].Descriptor()
}

func (PromoCode_ApplyType) Type() protoreflect.EnumType {
	return &file_chameleon_smelter_v1_crawl_item_product_proto_enumTypes[3]
}

func (x PromoCode_ApplyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PromoCode_ApplyType.Descriptor instead.
func (PromoCode_ApplyType) EnumDescriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_item_product_proto_rawDescGZIP(), []int{10, 1}
}

// CustomerType
type PromoCode_Condition_Customer_CustomerType int32

const (
	// AnyCustomer
	PromoCode_Condition_Customer_AnyCustomer PromoCode_Condition_Customer_CustomerType = 0
	// NewCustomer
	PromoCode_Condition_Customer_NewCustomer PromoCode_Condition_Customer_CustomerType = 1
	// OldCustomer
	PromoCode_Condition_Customer_OldCustomer PromoCode_Condition_Customer_CustomerType = 2
	// StudentCustomer
	PromoCode_Condition_Customer_StudentCustomer PromoCode_Condition_Customer_CustomerType = 6
	// OtherCustomer
	PromoCode_Condition_Customer_OtherCustomer PromoCode_Condition_Customer_CustomerType = 10
)

// Enum value maps for PromoCode_Condition_Customer_CustomerType.
var (
	PromoCode_Condition_Customer_CustomerType_name = map[int32]string{
		0:  "AnyCustomer",
		1:  "NewCustomer",
		2:  "OldCustomer",
		6:  "StudentCustomer",
		10: "OtherCustomer",
	}
	PromoCode_Condition_Customer_CustomerType_value = map[string]int32{
		"AnyCustomer":     0,
		"NewCustomer":     1,
		"OldCustomer":     2,
		"StudentCustomer": 6,
		"OtherCustomer":   10,
	}
)

func (x PromoCode_Condition_Customer_CustomerType) Enum() *PromoCode_Condition_Customer_CustomerType {
	p := new(PromoCode_Condition_Customer_CustomerType)
	*p = x
	return p
}

func (x PromoCode_Condition_Customer_CustomerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PromoCode_Condition_Customer_CustomerType) Descriptor() protoreflect.EnumDescriptor {
	return file_chameleon_smelter_v1_crawl_item_product_proto_enumTypes[4].Descriptor()
}

func (PromoCode_Condition_Customer_CustomerType) Type() protoreflect.EnumType {
	return &file_chameleon_smelter_v1_crawl_item_product_proto_enumTypes[4]
}

func (x PromoCode_Condition_Customer_CustomerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PromoCode_Condition_Customer_CustomerType.Descriptor instead.
func (PromoCode_Condition_Customer_CustomerType) EnumDescriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_item_product_proto_rawDescGZIP(), []int{10, 2, 1, 0}
}

// Store
type Store struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Store) Reset() {
	*x = Store{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Store) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Store) ProtoMessage() {}

func (x *Store) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Store.ProtoReflect.Descriptor instead.
func (*Store) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_item_product_proto_rawDescGZIP(), []int{0}
}

func (x *Store) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Store) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Source
type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// CrawlUrl
	CrawlUrl string `protobuf:"bytes,4,opt,name=crawlUrl,proto3" json:"crawlUrl,omitempty"`
	// CanonicalUrl
	CanonicalUrl string `protobuf:"bytes,6,opt,name=canonicalUrl,proto3" json:"canonicalUrl,omitempty"`
	// GlobalUniqId global unique id for distiguish out the same product
	GlobalUniqId string `protobuf:"bytes,7,opt,name=globalUniqId,proto3" json:"globalUniqId,omitempty"`
	// GroupId products in group
	GroupId string `protobuf:"bytes,8,opt,name=groupId,proto3" json:"groupId,omitempty"`
	// Locale default en_US
	Locale string `protobuf:"bytes,11,opt,name=locale,proto3" json:"locale,omitempty"`
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_item_product_proto_rawDescGZIP(), []int{1}
}

func (x *Source) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Source) GetCrawlUrl() string {
	if x != nil {
		return x.CrawlUrl
	}
	return ""
}

func (x *Source) GetCanonicalUrl() string {
	if x != nil {
		return x.CanonicalUrl
	}
	return ""
}

func (x *Source) GetGlobalUniqId() string {
	if x != nil {
		return x.GlobalUniqId
	}
	return ""
}

func (x *Source) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *Source) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

// Stats
type Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Rating
	Rating float32 `protobuf:"fixed32,1,opt,name=rating,proto3" json:"rating,omitempty"`
	// FavoriteCount
	FavoriteCount int32 `protobuf:"varint,2,opt,name=favoriteCount,proto3" json:"favoriteCount,omitempty"`
	// SellCount 销量
	SellCount int32 `protobuf:"varint,5,opt,name=sellCount,proto3" json:"sellCount,omitempty"`
	// ReviewCount
	ReviewCount int32 `protobuf:"varint,6,opt,name=reviewCount,proto3" json:"reviewCount,omitempty"`
	// OnlineTime
	OnlineTime string `protobuf:"bytes,11,opt,name=onlineTime,proto3" json:"onlineTime,omitempty"`
}

func (x *Stats) Reset() {
	*x = Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_item_product_proto_rawDescGZIP(), []int{2}
}

func (x *Stats) GetRating() float32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *Stats) GetFavoriteCount() int32 {
	if x != nil {
		return x.FavoriteCount
	}
	return 0
}

func (x *Stats) GetSellCount() int32 {
	if x != nil {
		return x.SellCount
	}
	return 0
}

func (x *Stats) GetReviewCount() int32 {
	if x != nil {
		return x.ReviewCount
	}
	return 0
}

func (x *Stats) GetOnlineTime() string {
	if x != nil {
		return x.OnlineTime
	}
	return ""
}

// Stock
type Stock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// StockStatus
	StockStatus Stock_StockStatus `protobuf:"varint,1,opt,name=stockStatus,proto3,enum=chameleon.smelter.v1.crawl.item.Stock_StockStatus" json:"stockStatus,omitempty"`
	// StockCount
	StockCount int32 `protobuf:"varint,2,opt,name=stockCount,proto3" json:"stockCount,omitempty"`
}

func (x *Stock) Reset() {
	*x = Stock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stock) ProtoMessage() {}

func (x *Stock) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stock.ProtoReflect.Descriptor instead.
func (*Stock) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_item_product_proto_rawDescGZIP(), []int{3}
}

func (x *Stock) GetStockStatus() Stock_StockStatus {
	if x != nil {
		return x.StockStatus
	}
	return Stock_StockStatusUnknown
}

func (x *Stock) GetStockCount() int32 {
	if x != nil {
		return x.StockCount
	}
	return 0
}

// Price
type Price struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Currency
	Currency regulation.Currency `protobuf:"varint,1,opt,name=currency,proto3,enum=chameleon.api.regulation.Currency" json:"currency,omitempty"`
	// Current
	Current int32 `protobuf:"varint,2,opt,name=current,proto3" json:"current,omitempty"`
	// MSRP
	Msrp int32 `protobuf:"varint,3,opt,name=msrp,proto3" json:"msrp,omitempty"`
	// Discount
	Discount int32 `protobuf:"varint,6,opt,name=discount,proto3" json:"discount,omitempty"`
	// DiscountDesc
	DiscountDesc string `protobuf:"bytes,7,opt,name=discountDesc,proto3" json:"discountDesc,omitempty"`
	// Discount1
	Discount1 int32 `protobuf:"varint,9,opt,name=discount1,proto3" json:"discount1,omitempty"`
	// Discount1Desc
	Discount1Desc string `protobuf:"bytes,10,opt,name=discount1Desc,proto3" json:"discount1Desc,omitempty"`
}

func (x *Price) Reset() {
	*x = Price{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Price) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Price) ProtoMessage() {}

func (x *Price) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Price.ProtoReflect.Descriptor instead.
func (*Price) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_item_product_proto_rawDescGZIP(), []int{4}
}

func (x *Price) GetCurrency() regulation.Currency {
	if x != nil {
		return x.Currency
	}
	return regulation.Currency_CurrencyUnknown
}

func (x *Price) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *Price) GetMsrp() int32 {
	if x != nil {
		return x.Msrp
	}
	return 0
}

func (x *Price) GetDiscount() int32 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *Price) GetDiscountDesc() string {
	if x != nil {
		return x.DiscountDesc
	}
	return ""
}

func (x *Price) GetDiscount1() int32 {
	if x != nil {
		return x.Discount1
	}
	return 0
}

func (x *Price) GetDiscount1Desc() string {
	if x != nil {
		return x.Discount1Desc
	}
	return ""
}

// Category
type Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Url
	Url string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	// Child
	Sub *Category `protobuf:"bytes,6,opt,name=sub,proto3" json:"sub,omitempty"`
}

func (x *Category) Reset() {
	*x = Category{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Category) ProtoMessage() {}

func (x *Category) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Category.ProtoReflect.Descriptor instead.
func (*Category) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_item_product_proto_rawDescGZIP(), []int{5}
}

func (x *Category) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Category) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Category) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Category) GetSub() *Category {
	if x != nil {
		return x.Sub
	}
	return nil
}

// SkuSpecOption
type SkuSpecOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Type
	Type SkuSpecType `protobuf:"varint,2,opt,name=type,proto3,enum=chameleon.smelter.v1.crawl.item.SkuSpecType" json:"type,omitempty"`
	// Name
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Value
	Value string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	// Icon
	Icon string `protobuf:"bytes,7,opt,name=icon,proto3" json:"icon,omitempty"`
	// Index
	Index int32 `protobuf:"varint,11,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *SkuSpecOption) Reset() {
	*x = SkuSpecOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkuSpecOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkuSpecOption) ProtoMessage() {}

func (x *SkuSpecOption) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkuSpecOption.ProtoReflect.Descriptor instead.
func (*SkuSpecOption) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_item_product_proto_rawDescGZIP(), []int{6}
}

func (x *SkuSpecOption) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SkuSpecOption) GetType() SkuSpecType {
	if x != nil {
		return x.Type
	}
	return SkuSpecType_SkuSpecUnknown
}

func (x *SkuSpecOption) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SkuSpecOption) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SkuSpecOption) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *SkuSpecOption) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

// Sku
type Sku struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sourceId
	SourceId string `protobuf:"bytes,1,opt,name=sourceId,proto3" json:"sourceId,omitempty"`
	// Specs
	Specs []*SkuSpecOption `protobuf:"bytes,3,rep,name=specs,proto3" json:"specs,omitempty"`
	// Title
	Title string `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	// Description
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	// Medias 图片/视频等
	Medias []*media.Media `protobuf:"bytes,31,rep,name=medias,proto3" json:"medias,omitempty"`
	// Price
	Price *Price `protobuf:"bytes,32,opt,name=price,proto3" json:"price,omitempty"`
	// 库存
	Stock *Stock `protobuf:"bytes,33,opt,name=stock,proto3" json:"stock,omitempty"`
	// 统计
	Stats *Stats `protobuf:"bytes,51,opt,name=stats,proto3" json:"stats,omitempty"`
	// Index
	Index int32 `protobuf:"varint,52,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Sku) Reset() {
	*x = Sku{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sku) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sku) ProtoMessage() {}

func (x *Sku) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sku.ProtoReflect.Descriptor instead.
func (*Sku) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_item_product_proto_rawDescGZIP(), []int{7}
}

func (x *Sku) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *Sku) GetSpecs() []*SkuSpecOption {
	if x != nil {
		return x.Specs
	}
	return nil
}

func (x *Sku) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Sku) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Sku) GetMedias() []*media.Media {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *Sku) GetPrice() *Price {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *Sku) GetStock() *Stock {
	if x != nil {
		return x.Stock
	}
	return nil
}

func (x *Sku) GetStats() *Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Sku) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

// Product
type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Store
	Store *Store `protobuf:"bytes,2,opt,name=store,proto3" json:"store,omitempty"`
	// Source
	Source *Source `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	// Brand
	BrandName string `protobuf:"bytes,4,opt,name=brandName,proto3" json:"brandName,omitempty"`
	// Title
	Title string `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	// Description
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// CrowdType 人群 @deprecated
	CrowdType string `protobuf:"bytes,11,opt,name=crowdType,proto3" json:"crowdType,omitempty"`
	// Categories 逗号分隔
	Category string `protobuf:"bytes,12,opt,name=category,proto3" json:"category,omitempty"`
	// SubCategory
	SubCategory string `protobuf:"bytes,13,opt,name=subCategory,proto3" json:"subCategory,omitempty"`
	// SubCategory2
	SubCategory2 string `protobuf:"bytes,14,opt,name=subCategory2,proto3" json:"subCategory2,omitempty"`
	// SubCategory3
	SubCategory3 string `protobuf:"bytes,15,opt,name=subCategory3,proto3" json:"subCategory3,omitempty"`
	// SubCategory4
	SubCategory4 string `protobuf:"bytes,16,opt,name=subCategory4,proto3" json:"subCategory4,omitempty"`
	// Medias 图片/视频等
	Medias []*media.Media `protobuf:"bytes,31,rep,name=medias,proto3" json:"medias,omitempty"`
	// Price
	Price *Price `protobuf:"bytes,32,opt,name=price,proto3" json:"price,omitempty"`
	// Stock
	Stock *Stock `protobuf:"bytes,33,opt,name=stock,proto3" json:"stock,omitempty"`
	// SkuItems
	SkuItems []*Sku `protobuf:"bytes,42,rep,name=skuItems,proto3" json:"skuItems,omitempty"`
	// Stats
	Stats *Stats `protobuf:"bytes,51,opt,name=stats,proto3" json:"stats,omitempty"`
	// ExtraInfo
	ExtraInfo map[string]string `protobuf:"bytes,101,rep,name=extraInfo,proto3" json:"extraInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_item_product_proto_rawDescGZIP(), []int{8}
}

func (x *Product) GetStore() *Store {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *Product) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Product) GetBrandName() string {
	if x != nil {
		return x.BrandName
	}
	return ""
}

func (x *Product) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Product) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Product) GetCrowdType() string {
	if x != nil {
		return x.CrowdType
	}
	return ""
}

func (x *Product) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Product) GetSubCategory() string {
	if x != nil {
		return x.SubCategory
	}
	return ""
}

func (x *Product) GetSubCategory2() string {
	if x != nil {
		return x.SubCategory2
	}
	return ""
}

func (x *Product) GetSubCategory3() string {
	if x != nil {
		return x.SubCategory3
	}
	return ""
}

func (x *Product) GetSubCategory4() string {
	if x != nil {
		return x.SubCategory4
	}
	return ""
}

func (x *Product) GetMedias() []*media.Media {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *Product) GetPrice() *Price {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *Product) GetStock() *Stock {
	if x != nil {
		return x.Stock
	}
	return nil
}

func (x *Product) GetSkuItems() []*Sku {
	if x != nil {
		return x.SkuItems
	}
	return nil
}

func (x *Product) GetStats() *Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Product) GetExtraInfo() map[string]string {
	if x != nil {
		return x.ExtraInfo
	}
	return nil
}

// ProductPreview
type ProductPreview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProductPreview) Reset() {
	*x = ProductPreview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductPreview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductPreview) ProtoMessage() {}

func (x *ProductPreview) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductPreview.ProtoReflect.Descriptor instead.
func (*ProductPreview) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_item_product_proto_rawDescGZIP(), []int{9}
}

// PromoCode
type PromoCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source
	Source *Source `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	// Retailer 供货商
	Retailer string `protobuf:"bytes,3,opt,name=retailer,proto3" json:"retailer,omitempty"`
	// Type
	Type PromoCode_PromoCodeType `protobuf:"varint,4,opt,name=type,proto3,enum=chameleon.smelter.v1.crawl.item.PromoCode_PromoCodeType" json:"type,omitempty"`
	// Title
	Title string `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	// Code
	Code string `protobuf:"bytes,6,opt,name=code,proto3" json:"code,omitempty"`
	// Description
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	// Condition
	Condition *PromoCode_Condition `protobuf:"bytes,8,opt,name=condition,proto3" json:"condition,omitempty"`
	// Discount
	Discount *PromoCode_Discount `protobuf:"bytes,11,opt,name=discount,proto3" json:"discount,omitempty"`
	// IsApplyToAll
	IsApplyToAll bool `protobuf:"varint,13,opt,name=isApplyToAll,proto3" json:"isApplyToAll,omitempty"`
	// ApplyTargets
	ApplyTargets []*PromoCode_ApplyTarget `protobuf:"bytes,14,rep,name=applyTargets,proto3" json:"applyTargets,omitempty"`
	// StartUtc
	StartUtc int64 `protobuf:"varint,19,opt,name=startUtc,proto3" json:"startUtc,omitempty"`
	// ExpiresAt
	ExpiresUtc int64 `protobuf:"varint,20,opt,name=expiresUtc,proto3" json:"expiresUtc,omitempty"`
	// Index
	Index int32 `protobuf:"varint,91,opt,name=index,proto3" json:"index,omitempty"`
	// ExtraInfo
	ExtraInfo map[string]string `protobuf:"bytes,99,rep,name=extraInfo,proto3" json:"extraInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PromoCode) Reset() {
	*x = PromoCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromoCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoCode) ProtoMessage() {}

func (x *PromoCode) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoCode.ProtoReflect.Descriptor instead.
func (*PromoCode) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_item_product_proto_rawDescGZIP(), []int{10}
}

func (x *PromoCode) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *PromoCode) GetRetailer() string {
	if x != nil {
		return x.Retailer
	}
	return ""
}

func (x *PromoCode) GetType() PromoCode_PromoCodeType {
	if x != nil {
		return x.Type
	}
	return PromoCode_CodeTypeUnknown
}

func (x *PromoCode) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PromoCode) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *PromoCode) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PromoCode) GetCondition() *PromoCode_Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *PromoCode) GetDiscount() *PromoCode_Discount {
	if x != nil {
		return x.Discount
	}
	return nil
}

func (x *PromoCode) GetIsApplyToAll() bool {
	if x != nil {
		return x.IsApplyToAll
	}
	return false
}

func (x *PromoCode) GetApplyTargets() []*PromoCode_ApplyTarget {
	if x != nil {
		return x.ApplyTargets
	}
	return nil
}

func (x *PromoCode) GetStartUtc() int64 {
	if x != nil {
		return x.StartUtc
	}
	return 0
}

func (x *PromoCode) GetExpiresUtc() int64 {
	if x != nil {
		return x.ExpiresUtc
	}
	return 0
}

func (x *PromoCode) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *PromoCode) GetExtraInfo() map[string]string {
	if x != nil {
		return x.ExtraInfo
	}
	return nil
}

// Discount
type PromoCode_Discount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// RawDiscount
	RawDiscount string `protobuf:"bytes,2,opt,name=rawDiscount,proto3" json:"rawDiscount,omitempty"`
	// Description
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *PromoCode_Discount) Reset() {
	*x = PromoCode_Discount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromoCode_Discount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoCode_Discount) ProtoMessage() {}

func (x *PromoCode_Discount) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoCode_Discount.ProtoReflect.Descriptor instead.
func (*PromoCode_Discount) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_item_product_proto_rawDescGZIP(), []int{10, 0}
}

func (x *PromoCode_Discount) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *PromoCode_Discount) GetRawDiscount() string {
	if x != nil {
		return x.RawDiscount
	}
	return ""
}

func (x *PromoCode_Discount) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// ApplyTarget
type PromoCode_ApplyTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type
	Type PromoCode_ApplyType `protobuf:"varint,1,opt,name=type,proto3,enum=chameleon.smelter.v1.crawl.item.PromoCode_ApplyType" json:"type,omitempty"`
	// Url
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// RawUrl
	RawUrl string `protobuf:"bytes,3,opt,name=rawUrl,proto3" json:"rawUrl,omitempty"`
}

func (x *PromoCode_ApplyTarget) Reset() {
	*x = PromoCode_ApplyTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromoCode_ApplyTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoCode_ApplyTarget) ProtoMessage() {}

func (x *PromoCode_ApplyTarget) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoCode_ApplyTarget.ProtoReflect.Descriptor instead.
func (*PromoCode_ApplyTarget) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_item_product_proto_rawDescGZIP(), []int{10, 1}
}

func (x *PromoCode_ApplyTarget) GetType() PromoCode_ApplyType {
	if x != nil {
		return x.Type
	}
	return PromoCode_ApplyUnknown
}

func (x *PromoCode_ApplyTarget) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PromoCode_ApplyTarget) GetRawUrl() string {
	if x != nil {
		return x.RawUrl
	}
	return ""
}

// Conditions
type PromoCode_Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RawCondition
	RawCondition string `protobuf:"bytes,2,opt,name=rawCondition,proto3" json:"rawCondition,omitempty"`
}

func (x *PromoCode_Condition) Reset() {
	*x = PromoCode_Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromoCode_Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoCode_Condition) ProtoMessage() {}

func (x *PromoCode_Condition) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoCode_Condition.ProtoReflect.Descriptor instead.
func (*PromoCode_Condition) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_item_product_proto_rawDescGZIP(), []int{10, 2}
}

func (x *PromoCode_Condition) GetRawCondition() string {
	if x != nil {
		return x.RawCondition
	}
	return ""
}

// OrderPrice
type PromoCode_Condition_OrderPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Currency
	Currency regulation.Currency `protobuf:"varint,1,opt,name=currency,proto3,enum=chameleon.api.regulation.Currency" json:"currency,omitempty"`
	// MinPrice
	MinPrice int32 `protobuf:"varint,2,opt,name=minPrice,proto3" json:"minPrice,omitempty"`
	// MaxPrice
	MaxPrice int32 `protobuf:"varint,3,opt,name=maxPrice,proto3" json:"maxPrice,omitempty"`
}

func (x *PromoCode_Condition_OrderPrice) Reset() {
	*x = PromoCode_Condition_OrderPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromoCode_Condition_OrderPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoCode_Condition_OrderPrice) ProtoMessage() {}

func (x *PromoCode_Condition_OrderPrice) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoCode_Condition_OrderPrice.ProtoReflect.Descriptor instead.
func (*PromoCode_Condition_OrderPrice) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_item_product_proto_rawDescGZIP(), []int{10, 2, 0}
}

func (x *PromoCode_Condition_OrderPrice) GetCurrency() regulation.Currency {
	if x != nil {
		return x.Currency
	}
	return regulation.Currency_CurrencyUnknown
}

func (x *PromoCode_Condition_OrderPrice) GetMinPrice() int32 {
	if x != nil {
		return x.MinPrice
	}
	return 0
}

func (x *PromoCode_Condition_OrderPrice) GetMaxPrice() int32 {
	if x != nil {
		return x.MaxPrice
	}
	return 0
}

// Customer
type PromoCode_Condition_Customer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type
	Type []PromoCode_Condition_Customer_CustomerType `protobuf:"varint,1,rep,packed,name=type,proto3,enum=chameleon.smelter.v1.crawl.item.PromoCode_Condition_Customer_CustomerType" json:"type,omitempty"`
	// Description
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *PromoCode_Condition_Customer) Reset() {
	*x = PromoCode_Condition_Customer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromoCode_Condition_Customer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoCode_Condition_Customer) ProtoMessage() {}

func (x *PromoCode_Condition_Customer) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoCode_Condition_Customer.ProtoReflect.Descriptor instead.
func (*PromoCode_Condition_Customer) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_item_product_proto_rawDescGZIP(), []int{10, 2, 1}
}

func (x *PromoCode_Condition_Customer) GetType() []PromoCode_Condition_Customer_CustomerType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *PromoCode_Condition_Customer) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Category
type PromoCode_Condition_Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Categories
	Categories []string `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
}

func (x *PromoCode_Condition_Category) Reset() {
	*x = PromoCode_Condition_Category{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromoCode_Condition_Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoCode_Condition_Category) ProtoMessage() {}

func (x *PromoCode_Condition_Category) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoCode_Condition_Category.ProtoReflect.Descriptor instead.
func (*PromoCode_Condition_Category) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_item_product_proto_rawDescGZIP(), []int{10, 2, 2}
}

func (x *PromoCode_Condition_Category) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

// Refer
type PromoCode_Condition_Refer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AfterRegister
	AfterRegister bool `protobuf:"varint,1,opt,name=afterRegister,proto3" json:"afterRegister,omitempty"`
	// AfterPurchase
	AfterPurchase bool `protobuf:"varint,2,opt,name=afterPurchase,proto3" json:"afterPurchase,omitempty"`
}

func (x *PromoCode_Condition_Refer) Reset() {
	*x = PromoCode_Condition_Refer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromoCode_Condition_Refer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoCode_Condition_Refer) ProtoMessage() {}

func (x *PromoCode_Condition_Refer) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoCode_Condition_Refer.ProtoReflect.Descriptor instead.
func (*PromoCode_Condition_Refer) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_item_product_proto_rawDescGZIP(), []int{10, 2, 3}
}

func (x *PromoCode_Condition_Refer) GetAfterRegister() bool {
	if x != nil {
		return x.AfterRegister
	}
	return false
}

func (x *PromoCode_Condition_Refer) GetAfterPurchase() bool {
	if x != nil {
		return x.AfterPurchase
	}
	return false
}

var File_chameleon_smelter_v1_crawl_item_product_proto protoreflect.FileDescriptor

var file_chameleon_smelter_v1_crawl_item_product_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2f, 0x73, 0x6d, 0x65, 0x6c,
	0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2f, 0x69, 0x74, 0x65,
	0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1f, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x65, 0x6c, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x69, 0x74, 0x65, 0x6d,
	0x1a, 0x23, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2b, 0x0a, 0x05, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x6e,
	0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a,
	0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x71, 0x49, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x71, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x73, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x05,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x54, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x63, 0x68, 0x61,
	0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x42, 0x0a, 0x0b, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x10, 0x0a, 0x22,
	0xf9, 0x01, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x68,
	0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x67, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x73, 0x72, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x6d, 0x73, 0x72, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44,
	0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x31, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x31, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x31, 0x44, 0x65, 0x73, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x44, 0x65, 0x73, 0x63, 0x22, 0x7d, 0x0a, 0x08, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x3b, 0x0a,
	0x03, 0x73, 0x75, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x61,
	0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x03, 0x73, 0x75, 0x62, 0x22, 0xb5, 0x01, 0x0a, 0x0d, 0x53,
	0x6b, 0x75, 0x53, 0x70, 0x65, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x63, 0x68, 0x61,
	0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x6b, 0x75,
	0x53, 0x70, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0xa3, 0x03, 0x0a, 0x03, 0x53, 0x6b, 0x75, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f,
	0x6e, 0x2e, 0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61,
	0x77, 0x6c, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x6b, 0x75, 0x53, 0x70, 0x65, 0x63, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x18, 0x1f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c,
	0x65, 0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x72, 0x61, 0x77, 0x6c, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f,
	0x6e, 0x2e, 0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61,
	0x77, 0x6c, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e,
	0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c,
	0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xeb, 0x06, 0x0a, 0x07, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e,
	0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c,
	0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x05, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73,
	0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e,
	0x69, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x6f,
	0x77, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x6f, 0x77, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x32, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x32, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x33, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x33, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x34, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x34, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x06, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e,
	0x2e, 0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77,
	0x6c, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73,
	0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e,
	0x69, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x12, 0x40, 0x0a, 0x08, 0x73, 0x6b, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x2a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e,
	0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c,
	0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x6b, 0x75, 0x52, 0x08, 0x73, 0x6b, 0x75, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73,
	0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e,
	0x69, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x55, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x65,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e,
	0x2e, 0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77,
	0x6c, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x10, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x22, 0xd2, 0x0d, 0x0a, 0x09, 0x50, 0x72, 0x6f,
	0x6d, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65,
	0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72,
	0x61, 0x77, 0x6c, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x38, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73, 0x6d,
	0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x69,
	0x74, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x72,
	0x6f, 0x6d, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x65,
	0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x69, 0x74,
	0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e,
	0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c,
	0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x41,
	0x6c, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x12, 0x5a, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63,
	0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x50,
	0x72, 0x6f, 0x6d, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x55, 0x74, 0x63, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x55, 0x74, 0x63, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x55, 0x74, 0x63, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x55, 0x74, 0x63, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x57, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x63, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c,
	0x65, 0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x72, 0x61, 0x77, 0x6c, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x64, 0x0a,
	0x08, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x72, 0x61, 0x77, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x61, 0x77, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x81, 0x01, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x48, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x34, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73, 0x6d,
	0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x69,
	0x74, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x61, 0x77, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x61, 0x77, 0x55, 0x72, 0x6c, 0x1a, 0xb1, 0x04, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x61, 0x77,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x84, 0x01, 0x0a, 0x0a, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61,
	0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x1a, 0xf7, 0x01, 0x0a, 0x08, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x5e, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x63, 0x68,
	0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x72,
	0x6f, 0x6d, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x69, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0f, 0x0a, 0x0b, 0x41, 0x6e, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x10, 0x0a, 0x1a, 0x2a, 0x0a, 0x08, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x53, 0x0a, 0x05, 0x52, 0x65, 0x66, 0x65, 0x72, 0x12,
	0x24, 0x0a, 0x0d, 0x61, 0x66, 0x74, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x66, 0x74, 0x65, 0x72, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x66, 0x74, 0x65, 0x72, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x1a, 0x3c, 0x0a, 0x0e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x47, 0x0a, 0x0d, 0x50, 0x72, 0x6f,
	0x6d, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x10, 0x02, 0x22, 0x59, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54,
	0x6f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x10, 0x03, 0x2a, 0x44, 0x0a,
	0x0b, 0x53, 0x6b, 0x75, 0x53, 0x70, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x6b, 0x75, 0x53, 0x70, 0x65, 0x63, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x6b, 0x75, 0x53, 0x70, 0x65, 0x63, 0x53, 0x69, 0x7a, 0x65, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x6b, 0x75, 0x53, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x10, 0x02, 0x42, 0x26, 0x5a, 0x24, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e,
	0x2f, 0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x61, 0x77,
	0x6c, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x3b, 0x69, 0x74, 0x65, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_chameleon_smelter_v1_crawl_item_product_proto_rawDescOnce sync.Once
	file_chameleon_smelter_v1_crawl_item_product_proto_rawDescData = file_chameleon_smelter_v1_crawl_item_product_proto_rawDesc
)

func file_chameleon_smelter_v1_crawl_item_product_proto_rawDescGZIP() []byte {
	file_chameleon_smelter_v1_crawl_item_product_proto_rawDescOnce.Do(func() {
		file_chameleon_smelter_v1_crawl_item_product_proto_rawDescData = protoimpl.X.CompressGZIP(file_chameleon_smelter_v1_crawl_item_product_proto_rawDescData)
	})
	return file_chameleon_smelter_v1_crawl_item_product_proto_rawDescData
}

var file_chameleon_smelter_v1_crawl_item_product_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_chameleon_smelter_v1_crawl_item_product_proto_goTypes = []interface{}{
	(SkuSpecType)(0),                               // 0: chameleon.smelter.v1.crawl.item.SkuSpecType
	(Stock_StockStatus)(0),                         // 1: chameleon.smelter.v1.crawl.item.Stock.StockStatus
	(PromoCode_PromoCodeType)(0),                   // 2: chameleon.smelter.v1.crawl.item.PromoCode.PromoCodeType
	(PromoCode_ApplyType)(0),                       // 3: chameleon.smelter.v1.crawl.item.PromoCode.ApplyType
	(PromoCode_Condition_Customer_CustomerType)(0), // 4: chameleon.smelter.v1.crawl.item.PromoCode.Condition.Customer.CustomerType
	(*Store)(nil),                                  // 5: chameleon.smelter.v1.crawl.item.Store
	(*Source)(nil),                                 // 6: chameleon.smelter.v1.crawl.item.Source
	(*Stats)(nil),                                  // 7: chameleon.smelter.v1.crawl.item.Stats
	(*Stock)(nil),                                  // 8: chameleon.smelter.v1.crawl.item.Stock
	(*Price)(nil),                                  // 9: chameleon.smelter.v1.crawl.item.Price
	(*Category)(nil),                               // 10: chameleon.smelter.v1.crawl.item.Category
	(*SkuSpecOption)(nil),                          // 11: chameleon.smelter.v1.crawl.item.SkuSpecOption
	(*Sku)(nil),                                    // 12: chameleon.smelter.v1.crawl.item.Sku
	(*Product)(nil),                                // 13: chameleon.smelter.v1.crawl.item.Product
	(*ProductPreview)(nil),                         // 14: chameleon.smelter.v1.crawl.item.ProductPreview
	(*PromoCode)(nil),                              // 15: chameleon.smelter.v1.crawl.item.PromoCode
	nil,                                            // 16: chameleon.smelter.v1.crawl.item.Product.ExtraInfoEntry
	(*PromoCode_Discount)(nil),                     // 17: chameleon.smelter.v1.crawl.item.PromoCode.Discount
	(*PromoCode_ApplyTarget)(nil),                  // 18: chameleon.smelter.v1.crawl.item.PromoCode.ApplyTarget
	(*PromoCode_Condition)(nil),                    // 19: chameleon.smelter.v1.crawl.item.PromoCode.Condition
	nil,                                            // 20: chameleon.smelter.v1.crawl.item.PromoCode.ExtraInfoEntry
	(*PromoCode_Condition_OrderPrice)(nil),         // 21: chameleon.smelter.v1.crawl.item.PromoCode.Condition.OrderPrice
	(*PromoCode_Condition_Customer)(nil),           // 22: chameleon.smelter.v1.crawl.item.PromoCode.Condition.Customer
	(*PromoCode_Condition_Category)(nil),           // 23: chameleon.smelter.v1.crawl.item.PromoCode.Condition.Category
	(*PromoCode_Condition_Refer)(nil),              // 24: chameleon.smelter.v1.crawl.item.PromoCode.Condition.Refer
	(regulation.Currency)(0),                       // 25: chameleon.api.regulation.Currency
	(*media.Media)(nil),                            // 26: chameleon.api.media.Media
}
var file_chameleon_smelter_v1_crawl_item_product_proto_depIdxs = []int32{
	1,  // 0: chameleon.smelter.v1.crawl.item.Stock.stockStatus:type_name -> chameleon.smelter.v1.crawl.item.Stock.StockStatus
	25, // 1: chameleon.smelter.v1.crawl.item.Price.currency:type_name -> chameleon.api.regulation.Currency
	10, // 2: chameleon.smelter.v1.crawl.item.Category.sub:type_name -> chameleon.smelter.v1.crawl.item.Category
	0,  // 3: chameleon.smelter.v1.crawl.item.SkuSpecOption.type:type_name -> chameleon.smelter.v1.crawl.item.SkuSpecType
	11, // 4: chameleon.smelter.v1.crawl.item.Sku.specs:type_name -> chameleon.smelter.v1.crawl.item.SkuSpecOption
	26, // 5: chameleon.smelter.v1.crawl.item.Sku.medias:type_name -> chameleon.api.media.Media
	9,  // 6: chameleon.smelter.v1.crawl.item.Sku.price:type_name -> chameleon.smelter.v1.crawl.item.Price
	8,  // 7: chameleon.smelter.v1.crawl.item.Sku.stock:type_name -> chameleon.smelter.v1.crawl.item.Stock
	7,  // 8: chameleon.smelter.v1.crawl.item.Sku.stats:type_name -> chameleon.smelter.v1.crawl.item.Stats
	5,  // 9: chameleon.smelter.v1.crawl.item.Product.store:type_name -> chameleon.smelter.v1.crawl.item.Store
	6,  // 10: chameleon.smelter.v1.crawl.item.Product.source:type_name -> chameleon.smelter.v1.crawl.item.Source
	26, // 11: chameleon.smelter.v1.crawl.item.Product.medias:type_name -> chameleon.api.media.Media
	9,  // 12: chameleon.smelter.v1.crawl.item.Product.price:type_name -> chameleon.smelter.v1.crawl.item.Price
	8,  // 13: chameleon.smelter.v1.crawl.item.Product.stock:type_name -> chameleon.smelter.v1.crawl.item.Stock
	12, // 14: chameleon.smelter.v1.crawl.item.Product.skuItems:type_name -> chameleon.smelter.v1.crawl.item.Sku
	7,  // 15: chameleon.smelter.v1.crawl.item.Product.stats:type_name -> chameleon.smelter.v1.crawl.item.Stats
	16, // 16: chameleon.smelter.v1.crawl.item.Product.extraInfo:type_name -> chameleon.smelter.v1.crawl.item.Product.ExtraInfoEntry
	6,  // 17: chameleon.smelter.v1.crawl.item.PromoCode.source:type_name -> chameleon.smelter.v1.crawl.item.Source
	2,  // 18: chameleon.smelter.v1.crawl.item.PromoCode.type:type_name -> chameleon.smelter.v1.crawl.item.PromoCode.PromoCodeType
	19, // 19: chameleon.smelter.v1.crawl.item.PromoCode.condition:type_name -> chameleon.smelter.v1.crawl.item.PromoCode.Condition
	17, // 20: chameleon.smelter.v1.crawl.item.PromoCode.discount:type_name -> chameleon.smelter.v1.crawl.item.PromoCode.Discount
	18, // 21: chameleon.smelter.v1.crawl.item.PromoCode.applyTargets:type_name -> chameleon.smelter.v1.crawl.item.PromoCode.ApplyTarget
	20, // 22: chameleon.smelter.v1.crawl.item.PromoCode.extraInfo:type_name -> chameleon.smelter.v1.crawl.item.PromoCode.ExtraInfoEntry
	3,  // 23: chameleon.smelter.v1.crawl.item.PromoCode.ApplyTarget.type:type_name -> chameleon.smelter.v1.crawl.item.PromoCode.ApplyType
	25, // 24: chameleon.smelter.v1.crawl.item.PromoCode.Condition.OrderPrice.currency:type_name -> chameleon.api.regulation.Currency
	4,  // 25: chameleon.smelter.v1.crawl.item.PromoCode.Condition.Customer.type:type_name -> chameleon.smelter.v1.crawl.item.PromoCode.Condition.Customer.CustomerType
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_chameleon_smelter_v1_crawl_item_product_proto_init() }
func file_chameleon_smelter_v1_crawl_item_product_proto_init() {
	if File_chameleon_smelter_v1_crawl_item_product_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Store); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Price); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Category); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkuSpecOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sku); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductPreview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromoCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromoCode_Discount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromoCode_ApplyTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromoCode_Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromoCode_Condition_OrderPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromoCode_Condition_Customer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromoCode_Condition_Category); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromoCode_Condition_Refer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chameleon_smelter_v1_crawl_item_product_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chameleon_smelter_v1_crawl_item_product_proto_goTypes,
		DependencyIndexes: file_chameleon_smelter_v1_crawl_item_product_proto_depIdxs,
		EnumInfos:         file_chameleon_smelter_v1_crawl_item_product_proto_enumTypes,
		MessageInfos:      file_chameleon_smelter_v1_crawl_item_product_proto_msgTypes,
	}.Build()
	File_chameleon_smelter_v1_crawl_item_product_proto = out.File
	file_chameleon_smelter_v1_crawl_item_product_proto_rawDesc = nil
	file_chameleon_smelter_v1_crawl_item_product_proto_goTypes = nil
	file_chameleon_smelter_v1_crawl_item_product_proto_depIdxs = nil
}
