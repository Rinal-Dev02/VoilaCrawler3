// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: chameleon/smelter/v1/crawl/data.proto

package crawl

import (
	http "github.com/voiladev/VoilaCrawl/protoc-gen-go/chameleon/api/http"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// NodeStatus
type NodeStatus int32

const (
	// NodeStatusUnknown
	NodeStatus_NodeStatusUnknown NodeStatus = 0
	// Online
	NodeStatus_Online NodeStatus = 1
	// Offline
	NodeStatus_Offline NodeStatus = 2
)

// Enum value maps for NodeStatus.
var (
	NodeStatus_name = map[int32]string{
		0: "NodeStatusUnknown",
		1: "Online",
		2: "Offline",
	}
	NodeStatus_value = map[string]int32{
		"NodeStatusUnknown": 0,
		"Online":            1,
		"Offline":           2,
	}
)

func (x NodeStatus) Enum() *NodeStatus {
	p := new(NodeStatus)
	*p = x
	return p
}

func (x NodeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_chameleon_smelter_v1_crawl_data_proto_enumTypes[0].Descriptor()
}

func (NodeStatus) Type() protoreflect.EnumType {
	return &file_chameleon_smelter_v1_crawl_data_proto_enumTypes[0]
}

func (x NodeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeStatus.Descriptor instead.
func (NodeStatus) EnumDescriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_data_proto_rawDescGZIP(), []int{0}
}

// Metadata
type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CreatedTime
	CreatedTime string `protobuf:"bytes,1,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
	// UpdatedTime
	UpdatedTime string `protobuf:"bytes,2,opt,name=updatedTime,proto3" json:"updatedTime,omitempty"`
	// IsDeleted
	IsDeleted bool `protobuf:"varint,3,opt,name=isDeleted,proto3" json:"isDeleted,omitempty"`
	// DeletedTime
	DeletedTime string `protobuf:"bytes,4,opt,name=deletedTime,proto3" json:"deletedTime,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_data_proto_rawDescGZIP(), []int{0}
}

func (x *Metadata) GetCreatedTime() string {
	if x != nil {
		return x.CreatedTime
	}
	return ""
}

func (x *Metadata) GetUpdatedTime() string {
	if x != nil {
		return x.UpdatedTime
	}
	return ""
}

func (x *Metadata) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *Metadata) GetDeletedTime() string {
	if x != nil {
		return x.DeletedTime
	}
	return ""
}

// Crawler
type Crawler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 全局唯一ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// UnifyId
	UnifyId string `protobuf:"bytes,2,opt,name=unifyId,proto3" json:"unifyId,omitempty"`
	// Version
	Version int32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	// Node
	Node *Crawler_Node `protobuf:"bytes,6,opt,name=node,proto3" json:"node,omitempty"`
	// Crawler
	AllowedDomains []string `protobuf:"bytes,11,rep,name=allowedDomains,proto3" json:"allowedDomains,omitempty"`
	// Options
	Options *Crawler_Options `protobuf:"bytes,14,opt,name=options,proto3" json:"options,omitempty"`
	// Metadata
	Metadata *Crawler_Metadata `protobuf:"bytes,15,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Crawler) Reset() {
	*x = Crawler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Crawler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Crawler) ProtoMessage() {}

func (x *Crawler) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Crawler.ProtoReflect.Descriptor instead.
func (*Crawler) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_data_proto_rawDescGZIP(), []int{1}
}

func (x *Crawler) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Crawler) GetUnifyId() string {
	if x != nil {
		return x.UnifyId
	}
	return ""
}

func (x *Crawler) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Crawler) GetNode() *Crawler_Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *Crawler) GetAllowedDomains() []string {
	if x != nil {
		return x.AllowedDomains
	}
	return nil
}

func (x *Crawler) GetOptions() *Crawler_Options {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Crawler) GetMetadata() *Crawler_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// SortedCrawler
type SortedCrawler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Crawlers crawlers sort by version in desc
	Crawlers []*Crawler `protobuf:"bytes,3,rep,name=crawlers,proto3" json:"crawlers,omitempty"`
}

func (x *SortedCrawler) Reset() {
	*x = SortedCrawler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortedCrawler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortedCrawler) ProtoMessage() {}

func (x *SortedCrawler) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortedCrawler.ProtoReflect.Descriptor instead.
func (*SortedCrawler) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_data_proto_rawDescGZIP(), []int{2}
}

func (x *SortedCrawler) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SortedCrawler) GetCrawlers() []*Crawler {
	if x != nil {
		return x.Crawlers
	}
	return nil
}

// Node
type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Host
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// MaxConcurrency
	MaxConcurrency int32 `protobuf:"varint,11,opt,name=maxConcurrency,proto3" json:"maxConcurrency,omitempty"`
	// idleConcurrency
	IdleConcurrency int32 `protobuf:"varint,12,opt,name=idleConcurrency,proto3" json:"idleConcurrency,omitempty"`
	// Status
	Status NodeStatus `protobuf:"varint,100,opt,name=status,proto3,enum=chameleon.smelter.v1.crawl.NodeStatus" json:"status,omitempty"`
	// Metadata
	Metadata *Node_Metadata `protobuf:"bytes,101,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_data_proto_rawDescGZIP(), []int{3}
}

func (x *Node) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Node) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Node) GetMaxConcurrency() int32 {
	if x != nil {
		return x.MaxConcurrency
	}
	return 0
}

func (x *Node) GetIdleConcurrency() int32 {
	if x != nil {
		return x.IdleConcurrency
	}
	return 0
}

func (x *Node) GetStatus() NodeStatus {
	if x != nil {
		return x.Status
	}
	return NodeStatus_NodeStatusUnknown
}

func (x *Node) GetMetadata() *Node_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Join
type Join struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Join) Reset() {
	*x = Join{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Join) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Join) ProtoMessage() {}

func (x *Join) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Join.ProtoReflect.Descriptor instead.
func (*Join) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_data_proto_rawDescGZIP(), []int{4}
}

// Heartbeat
type Heartbeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Heartbeat) Reset() {
	*x = Heartbeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Heartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartbeat) ProtoMessage() {}

func (x *Heartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartbeat.ProtoReflect.Descriptor instead.
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_data_proto_rawDescGZIP(), []int{5}
}

// Command
type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// NodeId
	NodeId string `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	// Data
	Data *anypb.Any `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Command) Reset() {
	*x = Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_data_proto_rawDescGZIP(), []int{6}
}

func (x *Command) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Command) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *Command) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

// CrawlerOptions
type Crawler_Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DisableProxy
	DisableProxy bool `protobuf:"varint,1,opt,name=disableProxy,proto3" json:"disableProxy,omitempty"`
	// EnableHeadless
	EnableHeadless bool `protobuf:"varint,2,opt,name=enableHeadless,proto3" json:"enableHeadless,omitempty"`
	// LoginRequired
	LoginRequired bool `protobuf:"varint,3,opt,name=loginRequired,proto3" json:"loginRequired,omitempty"`
	// Headers
	Headers map[string]string `protobuf:"bytes,11,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Cookies
	Cookies []*Crawler_Options_Cookie `protobuf:"bytes,12,rep,name=cookies,proto3" json:"cookies,omitempty"`
}

func (x *Crawler_Options) Reset() {
	*x = Crawler_Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Crawler_Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Crawler_Options) ProtoMessage() {}

func (x *Crawler_Options) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Crawler_Options.ProtoReflect.Descriptor instead.
func (*Crawler_Options) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_data_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Crawler_Options) GetDisableProxy() bool {
	if x != nil {
		return x.DisableProxy
	}
	return false
}

func (x *Crawler_Options) GetEnableHeadless() bool {
	if x != nil {
		return x.EnableHeadless
	}
	return false
}

func (x *Crawler_Options) GetLoginRequired() bool {
	if x != nil {
		return x.LoginRequired
	}
	return false
}

func (x *Crawler_Options) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Crawler_Options) GetCookies() []*Crawler_Options_Cookie {
	if x != nil {
		return x.Cookies
	}
	return nil
}

// Metadata
type Crawler_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OnlineUtc
	OnlineUtc int64 `protobuf:"varint,1,opt,name=onlineUtc,proto3" json:"onlineUtc,omitempty"`
	// ParseCount
	ParseCount int32 `protobuf:"varint,6,opt,name=parseCount,proto3" json:"parseCount,omitempty"`
	// filepath
	Filepath string `protobuf:"bytes,11,opt,name=filepath,proto3" json:"filepath,omitempty"`
}

func (x *Crawler_Metadata) Reset() {
	*x = Crawler_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Crawler_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Crawler_Metadata) ProtoMessage() {}

func (x *Crawler_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Crawler_Metadata.ProtoReflect.Descriptor instead.
func (*Crawler_Metadata) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_data_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Crawler_Metadata) GetOnlineUtc() int64 {
	if x != nil {
		return x.OnlineUtc
	}
	return 0
}

func (x *Crawler_Metadata) GetParseCount() int32 {
	if x != nil {
		return x.ParseCount
	}
	return 0
}

func (x *Crawler_Metadata) GetFilepath() string {
	if x != nil {
		return x.Filepath
	}
	return ""
}

// Node
type Crawler_Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Host
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *Crawler_Node) Reset() {
	*x = Crawler_Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Crawler_Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Crawler_Node) ProtoMessage() {}

func (x *Crawler_Node) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Crawler_Node.ProtoReflect.Descriptor instead.
func (*Crawler_Node) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_data_proto_rawDescGZIP(), []int{1, 2}
}

func (x *Crawler_Node) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Crawler_Node) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

// Cookie
type Crawler_Options_Cookie struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Value
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// Path
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *Crawler_Options_Cookie) Reset() {
	*x = Crawler_Options_Cookie{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Crawler_Options_Cookie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Crawler_Options_Cookie) ProtoMessage() {}

func (x *Crawler_Options_Cookie) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Crawler_Options_Cookie.ProtoReflect.Descriptor instead.
func (*Crawler_Options_Cookie) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_data_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *Crawler_Options_Cookie) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Crawler_Options_Cookie) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Crawler_Options_Cookie) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// Metadata
type Node_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OnlineUtc
	OnlineUtc int64 `protobuf:"varint,1,opt,name=onlineUtc,proto3" json:"onlineUtc,omitempty"`
	// LastHeartbeatUtc
	LastHeartbeatUtc int64 `protobuf:"varint,2,opt,name=lastHeartbeatUtc,proto3" json:"lastHeartbeatUtc,omitempty"`
}

func (x *Node_Metadata) Reset() {
	*x = Node_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node_Metadata) ProtoMessage() {}

func (x *Node_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node_Metadata.ProtoReflect.Descriptor instead.
func (*Node_Metadata) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_data_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Node_Metadata) GetOnlineUtc() int64 {
	if x != nil {
		return x.OnlineUtc
	}
	return 0
}

func (x *Node_Metadata) GetLastHeartbeatUtc() int64 {
	if x != nil {
		return x.LastHeartbeatUtc
	}
	return 0
}

// Ping
type Join_Ping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Node
	Node *Join_Ping_Node `protobuf:"bytes,6,opt,name=node,proto3" json:"node,omitempty"`
	// Crawlers
	Crawlers []*Crawler `protobuf:"bytes,11,rep,name=crawlers,proto3" json:"crawlers,omitempty"`
}

func (x *Join_Ping) Reset() {
	*x = Join_Ping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Join_Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Join_Ping) ProtoMessage() {}

func (x *Join_Ping) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Join_Ping.ProtoReflect.Descriptor instead.
func (*Join_Ping) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_data_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Join_Ping) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Join_Ping) GetNode() *Join_Ping_Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *Join_Ping) GetCrawlers() []*Crawler {
	if x != nil {
		return x.Crawlers
	}
	return nil
}

// Pong
type Join_Pong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// NodeId
	NodeId string `protobuf:"bytes,3,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	// NetworkDelay
	NetworkDelay int64 `protobuf:"varint,4,opt,name=networkDelay,proto3" json:"networkDelay,omitempty"`
	// HeartbetaInterval 心跳间隔时间, 单位毫秒
	HeartbeatInterval int64 `protobuf:"varint,11,opt,name=heartbeatInterval,proto3" json:"heartbeatInterval,omitempty"`
}

func (x *Join_Pong) Reset() {
	*x = Join_Pong{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Join_Pong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Join_Pong) ProtoMessage() {}

func (x *Join_Pong) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Join_Pong.ProtoReflect.Descriptor instead.
func (*Join_Pong) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_data_proto_rawDescGZIP(), []int{4, 1}
}

func (x *Join_Pong) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Join_Pong) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *Join_Pong) GetNetworkDelay() int64 {
	if x != nil {
		return x.NetworkDelay
	}
	return 0
}

func (x *Join_Pong) GetHeartbeatInterval() int64 {
	if x != nil {
		return x.HeartbeatInterval
	}
	return 0
}

// Node
type Join_Ping_Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Host
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// MaxConcurrency
	MaxConcurrency int32 `protobuf:"varint,11,opt,name=maxConcurrency,proto3" json:"maxConcurrency,omitempty"`
	// idleConcurrency
	IdleConcurrency int32 `protobuf:"varint,12,opt,name=idleConcurrency,proto3" json:"idleConcurrency,omitempty"`
}

func (x *Join_Ping_Node) Reset() {
	*x = Join_Ping_Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Join_Ping_Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Join_Ping_Node) ProtoMessage() {}

func (x *Join_Ping_Node) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Join_Ping_Node.ProtoReflect.Descriptor instead.
func (*Join_Ping_Node) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_data_proto_rawDescGZIP(), []int{4, 0, 0}
}

func (x *Join_Ping_Node) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Join_Ping_Node) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Join_Ping_Node) GetMaxConcurrency() int32 {
	if x != nil {
		return x.MaxConcurrency
	}
	return 0
}

func (x *Join_Ping_Node) GetIdleConcurrency() int32 {
	if x != nil {
		return x.IdleConcurrency
	}
	return 0
}

// Ping
type Heartbeat_Ping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Id
	NodeId string `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	// MaxConcurrency
	MaxConcurrency int32 `protobuf:"varint,11,opt,name=maxConcurrency,proto3" json:"maxConcurrency,omitempty"`
	// idleConcurrency
	IdleConcurrency int32 `protobuf:"varint,12,opt,name=idleConcurrency,proto3" json:"idleConcurrency,omitempty"`
}

func (x *Heartbeat_Ping) Reset() {
	*x = Heartbeat_Ping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Heartbeat_Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartbeat_Ping) ProtoMessage() {}

func (x *Heartbeat_Ping) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartbeat_Ping.ProtoReflect.Descriptor instead.
func (*Heartbeat_Ping) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_data_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Heartbeat_Ping) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Heartbeat_Ping) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *Heartbeat_Ping) GetMaxConcurrency() int32 {
	if x != nil {
		return x.MaxConcurrency
	}
	return 0
}

func (x *Heartbeat_Ping) GetIdleConcurrency() int32 {
	if x != nil {
		return x.IdleConcurrency
	}
	return 0
}

// Pong
type Heartbeat_Pong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// NodeId
	NodeId string `protobuf:"bytes,3,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	// NetworkDelay
	NetworkDelay int64 `protobuf:"varint,4,opt,name=networkDelay,proto3" json:"networkDelay,omitempty"`
}

func (x *Heartbeat_Pong) Reset() {
	*x = Heartbeat_Pong{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Heartbeat_Pong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartbeat_Pong) ProtoMessage() {}

func (x *Heartbeat_Pong) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartbeat_Pong.ProtoReflect.Descriptor instead.
func (*Heartbeat_Pong) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_data_proto_rawDescGZIP(), []int{5, 1}
}

func (x *Heartbeat_Pong) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Heartbeat_Pong) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *Heartbeat_Pong) GetNetworkDelay() int64 {
	if x != nil {
		return x.NetworkDelay
	}
	return 0
}

// Request
type Command_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TracingId 全局跟踪ID, 有别于jobId, job 可能执行多次，每次执行，都会生成一个随机的tracingId
	// TracingId 用于判别某个发起的任务是否完结
	TracingId string `protobuf:"bytes,1,opt,name=tracingId,proto3" json:"tracingId,omitempty"`
	// JobId
	JobId string `protobuf:"bytes,2,opt,name=jobId,proto3" json:"jobId,omitempty"`
	// Method
	Method http.Method `protobuf:"varint,12,opt,name=method,proto3,enum=chameleon.api.http.Method" json:"method,omitempty"`
	// URL
	Url string `protobuf:"bytes,13,opt,name=url,proto3" json:"url,omitempty"`
	// CustomHeaders
	CustomHeaders []*http.Header `protobuf:"bytes,14,rep,name=customHeaders,proto3" json:"customHeaders,omitempty"`
	// CustomCookies
	CustomCookies []*http.Cookie `protobuf:"bytes,15,rep,name=customCookies,proto3" json:"customCookies,omitempty"`
	// Body
	Body []byte `protobuf:"bytes,20,opt,name=body,proto3" json:"body,omitempty"`
	// Parent use this to set request referer
	Parent *Command_Request `protobuf:"bytes,41,opt,name=parent,proto3" json:"parent,omitempty"`
	// Options
	Options *Command_Request_Options `protobuf:"bytes,51,opt,name=options,proto3" json:"options,omitempty"`
	// SharingData
	SharingData []*Command_Request_KeyValue `protobuf:"bytes,101,rep,name=sharingData,proto3" json:"sharingData,omitempty"`
}

func (x *Command_Request) Reset() {
	*x = Command_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command_Request) ProtoMessage() {}

func (x *Command_Request) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command_Request.ProtoReflect.Descriptor instead.
func (*Command_Request) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_data_proto_rawDescGZIP(), []int{6, 0}
}

func (x *Command_Request) GetTracingId() string {
	if x != nil {
		return x.TracingId
	}
	return ""
}

func (x *Command_Request) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *Command_Request) GetMethod() http.Method {
	if x != nil {
		return x.Method
	}
	return http.Method_GET
}

func (x *Command_Request) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Command_Request) GetCustomHeaders() []*http.Header {
	if x != nil {
		return x.CustomHeaders
	}
	return nil
}

func (x *Command_Request) GetCustomCookies() []*http.Cookie {
	if x != nil {
		return x.CustomCookies
	}
	return nil
}

func (x *Command_Request) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Command_Request) GetParent() *Command_Request {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *Command_Request) GetOptions() *Command_Request_Options {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Command_Request) GetSharingData() []*Command_Request_KeyValue {
	if x != nil {
		return x.SharingData
	}
	return nil
}

// Options
type Command_Request_Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DisableProxy
	DisableProxy bool `protobuf:"varint,1,opt,name=disableProxy,proto3" json:"disableProxy,omitempty"`
	// EnableHeadless
	EnableHeadless bool `protobuf:"varint,2,opt,name=enableHeadless,proto3" json:"enableHeadless,omitempty"`
	// LoginRequired
	LoginRequired bool `protobuf:"varint,3,opt,name=loginRequired,proto3" json:"loginRequired,omitempty"`
	// MaxTtlPerRequest 每个请求的最大时长
	MaxTtlPerRequest int32 `protobuf:"varint,6,opt,name=maxTtlPerRequest,proto3" json:"maxTtlPerRequest,omitempty"`
	// 失败是否重试
	EnableRetryWhenFailed bool `protobuf:"varint,11,opt,name=enableRetryWhenFailed,proto3" json:"enableRetryWhenFailed,omitempty"`
	// 最大可重试次数
	MaxRetryCount int32 `protobuf:"varint,12,opt,name=maxRetryCount,proto3" json:"maxRetryCount,omitempty"`
	// MaxRequestDepth 最大访问深度
	MaxRequestDepth int32 `protobuf:"varint,14,opt,name=maxRequestDepth,proto3" json:"maxRequestDepth,omitempty"`
}

func (x *Command_Request_Options) Reset() {
	*x = Command_Request_Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command_Request_Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command_Request_Options) ProtoMessage() {}

func (x *Command_Request_Options) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command_Request_Options.ProtoReflect.Descriptor instead.
func (*Command_Request_Options) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_data_proto_rawDescGZIP(), []int{6, 0, 0}
}

func (x *Command_Request_Options) GetDisableProxy() bool {
	if x != nil {
		return x.DisableProxy
	}
	return false
}

func (x *Command_Request_Options) GetEnableHeadless() bool {
	if x != nil {
		return x.EnableHeadless
	}
	return false
}

func (x *Command_Request_Options) GetLoginRequired() bool {
	if x != nil {
		return x.LoginRequired
	}
	return false
}

func (x *Command_Request_Options) GetMaxTtlPerRequest() int32 {
	if x != nil {
		return x.MaxTtlPerRequest
	}
	return 0
}

func (x *Command_Request_Options) GetEnableRetryWhenFailed() bool {
	if x != nil {
		return x.EnableRetryWhenFailed
	}
	return false
}

func (x *Command_Request_Options) GetMaxRetryCount() int32 {
	if x != nil {
		return x.MaxRetryCount
	}
	return 0
}

func (x *Command_Request_Options) GetMaxRequestDepth() int32 {
	if x != nil {
		return x.MaxRequestDepth
	}
	return 0
}

// KeyValue
type Command_Request_KeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Value
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Command_Request_KeyValue) Reset() {
	*x = Command_Request_KeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command_Request_KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command_Request_KeyValue) ProtoMessage() {}

func (x *Command_Request_KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command_Request_KeyValue.ProtoReflect.Descriptor instead.
func (*Command_Request_KeyValue) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_data_proto_rawDescGZIP(), []int{6, 0, 1}
}

func (x *Command_Request_KeyValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Command_Request_KeyValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Status
type Command_Request_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RetryCount 每重试一次，就+1
	RetryCount int32 `protobuf:"varint,1,opt,name=retryCount,proto3" json:"retryCount,omitempty"`
	// RequestDepth Depth the crawler dig into. 这里说的就是比如从列表进入详情,从详情又进入其他详情
	RequestDepth int32 `protobuf:"varint,2,opt,name=requestDepth,proto3" json:"requestDepth,omitempty"`
}

func (x *Command_Request_Status) Reset() {
	*x = Command_Request_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command_Request_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command_Request_Status) ProtoMessage() {}

func (x *Command_Request_Status) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawl_data_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command_Request_Status.ProtoReflect.Descriptor instead.
func (*Command_Request_Status) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawl_data_proto_rawDescGZIP(), []int{6, 0, 2}
}

func (x *Command_Request_Status) GetRetryCount() int32 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

func (x *Command_Request_Status) GetRequestDepth() int32 {
	if x != nil {
		return x.RequestDepth
	}
	return 0
}

var File_chameleon_smelter_v1_crawl_data_proto protoreflect.FileDescriptor

var file_chameleon_smelter_v1_crawl_data_proto_rawDesc = []byte{
	0x0a, 0x25, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2f, 0x73, 0x6d, 0x65, 0x6c,
	0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65,
	0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72,
	0x61, 0x77, 0x6c, 0x1a, 0x1d, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x01,
	0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xfa,
	0x06, 0x0a, 0x07, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e,
	0x69, 0x66, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x6e, 0x69,
	0x66, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c,
	0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63,
	0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65,
	0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x12, 0x45, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f,
	0x6e, 0x2e, 0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61,
	0x77, 0x6c, 0x2e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x48, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x43, 0x72, 0x61, 0x77, 0x6c,
	0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xa1, 0x03, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x12, 0x52, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e,
	0x2e, 0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77,
	0x6c, 0x2e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x4c, 0x0a, 0x07, 0x63, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65,
	0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x07, 0x63, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x73, 0x1a, 0x46, 0x0a, 0x06, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x1a, 0x3a, 0x0a,
	0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x64, 0x0a, 0x08, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x55,
	0x74, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x55, 0x74, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x73, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x1a,
	0x2a, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0x60, 0x0a, 0x0d, 0x53,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x08,
	0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x65, 0x6c, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x43, 0x72, 0x61, 0x77,
	0x6c, 0x65, 0x72, 0x52, 0x08, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x73, 0x22, 0xd9, 0x02,
	0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61,
	0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x69, 0x64, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3e, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63,
	0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x65, 0x6c, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x54, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x1c, 0x0a, 0x09, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x74, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x74, 0x63, 0x12, 0x2a, 0x0a,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x55, 0x74,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x55, 0x74, 0x63, 0x22, 0xbd, 0x03, 0x0a, 0x04, 0x4a, 0x6f,
	0x69, 0x6e, 0x1a, 0xa3, 0x02, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3e, 0x0a, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c,
	0x65, 0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x72, 0x61, 0x77, 0x6c, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x63, 0x72, 0x61,
	0x77, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68,
	0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72,
	0x52, 0x08, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x73, 0x1a, 0x7c, 0x0a, 0x04, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x28,
	0x0a, 0x0f, 0x69, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x69, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x1a, 0x8e, 0x01, 0x0a, 0x04, 0x50, 0x6f, 0x6e,
	0x67, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x68,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0xfe, 0x01, 0x0a, 0x09, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x1a, 0x8e, 0x01, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x28,
	0x0a, 0x0f, 0x69, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x69, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x1a, 0x60, 0x0a, 0x04, 0x50, 0x6f, 0x6e, 0x67,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x22, 0xa5, 0x08, 0x0a, 0x07, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xb9, 0x07, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65,
	0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x40, 0x0a, 0x0d,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x40,
	0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x43, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x12, 0x43, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e,
	0x2e, 0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77,
	0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x68, 0x61,
	0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x56, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x65, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x1a, 0xad, 0x02, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x12, 0x26, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x65, 0x61, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2a,
	0x0a, 0x10, 0x6d, 0x61, 0x78, 0x54, 0x74, 0x6c, 0x50, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x54, 0x74, 0x6c,
	0x50, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x74, 0x72, 0x79, 0x57, 0x68, 0x65, 0x6e, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x74, 0x72, 0x79, 0x57, 0x68, 0x65, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68,
	0x1a, 0x32, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x4c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x70,
	0x74, 0x68, 0x2a, 0x3c, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x15, 0x0a, 0x11, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x02,
	0x42, 0x22, 0x5a, 0x20, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2f, 0x73, 0x6d,
	0x65, 0x6c, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x3b, 0x63,
	0x72, 0x61, 0x77, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chameleon_smelter_v1_crawl_data_proto_rawDescOnce sync.Once
	file_chameleon_smelter_v1_crawl_data_proto_rawDescData = file_chameleon_smelter_v1_crawl_data_proto_rawDesc
)

func file_chameleon_smelter_v1_crawl_data_proto_rawDescGZIP() []byte {
	file_chameleon_smelter_v1_crawl_data_proto_rawDescOnce.Do(func() {
		file_chameleon_smelter_v1_crawl_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_chameleon_smelter_v1_crawl_data_proto_rawDescData)
	})
	return file_chameleon_smelter_v1_crawl_data_proto_rawDescData
}

var file_chameleon_smelter_v1_crawl_data_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_chameleon_smelter_v1_crawl_data_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_chameleon_smelter_v1_crawl_data_proto_goTypes = []interface{}{
	(NodeStatus)(0),                  // 0: chameleon.smelter.v1.crawl.NodeStatus
	(*Metadata)(nil),                 // 1: chameleon.smelter.v1.crawl.Metadata
	(*Crawler)(nil),                  // 2: chameleon.smelter.v1.crawl.Crawler
	(*SortedCrawler)(nil),            // 3: chameleon.smelter.v1.crawl.SortedCrawler
	(*Node)(nil),                     // 4: chameleon.smelter.v1.crawl.Node
	(*Join)(nil),                     // 5: chameleon.smelter.v1.crawl.Join
	(*Heartbeat)(nil),                // 6: chameleon.smelter.v1.crawl.Heartbeat
	(*Command)(nil),                  // 7: chameleon.smelter.v1.crawl.Command
	(*Crawler_Options)(nil),          // 8: chameleon.smelter.v1.crawl.Crawler.Options
	(*Crawler_Metadata)(nil),         // 9: chameleon.smelter.v1.crawl.Crawler.Metadata
	(*Crawler_Node)(nil),             // 10: chameleon.smelter.v1.crawl.Crawler.Node
	(*Crawler_Options_Cookie)(nil),   // 11: chameleon.smelter.v1.crawl.Crawler.Options.Cookie
	nil,                              // 12: chameleon.smelter.v1.crawl.Crawler.Options.HeadersEntry
	(*Node_Metadata)(nil),            // 13: chameleon.smelter.v1.crawl.Node.Metadata
	(*Join_Ping)(nil),                // 14: chameleon.smelter.v1.crawl.Join.Ping
	(*Join_Pong)(nil),                // 15: chameleon.smelter.v1.crawl.Join.Pong
	(*Join_Ping_Node)(nil),           // 16: chameleon.smelter.v1.crawl.Join.Ping.Node
	(*Heartbeat_Ping)(nil),           // 17: chameleon.smelter.v1.crawl.Heartbeat.Ping
	(*Heartbeat_Pong)(nil),           // 18: chameleon.smelter.v1.crawl.Heartbeat.Pong
	(*Command_Request)(nil),          // 19: chameleon.smelter.v1.crawl.Command.Request
	(*Command_Request_Options)(nil),  // 20: chameleon.smelter.v1.crawl.Command.Request.Options
	(*Command_Request_KeyValue)(nil), // 21: chameleon.smelter.v1.crawl.Command.Request.KeyValue
	(*Command_Request_Status)(nil),   // 22: chameleon.smelter.v1.crawl.Command.Request.Status
	(*anypb.Any)(nil),                // 23: google.protobuf.Any
	(http.Method)(0),                 // 24: chameleon.api.http.Method
	(*http.Header)(nil),              // 25: chameleon.api.http.Header
	(*http.Cookie)(nil),              // 26: chameleon.api.http.Cookie
}
var file_chameleon_smelter_v1_crawl_data_proto_depIdxs = []int32{
	10, // 0: chameleon.smelter.v1.crawl.Crawler.node:type_name -> chameleon.smelter.v1.crawl.Crawler.Node
	8,  // 1: chameleon.smelter.v1.crawl.Crawler.options:type_name -> chameleon.smelter.v1.crawl.Crawler.Options
	9,  // 2: chameleon.smelter.v1.crawl.Crawler.metadata:type_name -> chameleon.smelter.v1.crawl.Crawler.Metadata
	2,  // 3: chameleon.smelter.v1.crawl.SortedCrawler.crawlers:type_name -> chameleon.smelter.v1.crawl.Crawler
	0,  // 4: chameleon.smelter.v1.crawl.Node.status:type_name -> chameleon.smelter.v1.crawl.NodeStatus
	13, // 5: chameleon.smelter.v1.crawl.Node.metadata:type_name -> chameleon.smelter.v1.crawl.Node.Metadata
	23, // 6: chameleon.smelter.v1.crawl.Command.data:type_name -> google.protobuf.Any
	12, // 7: chameleon.smelter.v1.crawl.Crawler.Options.headers:type_name -> chameleon.smelter.v1.crawl.Crawler.Options.HeadersEntry
	11, // 8: chameleon.smelter.v1.crawl.Crawler.Options.cookies:type_name -> chameleon.smelter.v1.crawl.Crawler.Options.Cookie
	16, // 9: chameleon.smelter.v1.crawl.Join.Ping.node:type_name -> chameleon.smelter.v1.crawl.Join.Ping.Node
	2,  // 10: chameleon.smelter.v1.crawl.Join.Ping.crawlers:type_name -> chameleon.smelter.v1.crawl.Crawler
	24, // 11: chameleon.smelter.v1.crawl.Command.Request.method:type_name -> chameleon.api.http.Method
	25, // 12: chameleon.smelter.v1.crawl.Command.Request.customHeaders:type_name -> chameleon.api.http.Header
	26, // 13: chameleon.smelter.v1.crawl.Command.Request.customCookies:type_name -> chameleon.api.http.Cookie
	19, // 14: chameleon.smelter.v1.crawl.Command.Request.parent:type_name -> chameleon.smelter.v1.crawl.Command.Request
	20, // 15: chameleon.smelter.v1.crawl.Command.Request.options:type_name -> chameleon.smelter.v1.crawl.Command.Request.Options
	21, // 16: chameleon.smelter.v1.crawl.Command.Request.sharingData:type_name -> chameleon.smelter.v1.crawl.Command.Request.KeyValue
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_chameleon_smelter_v1_crawl_data_proto_init() }
func file_chameleon_smelter_v1_crawl_data_proto_init() {
	if File_chameleon_smelter_v1_crawl_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chameleon_smelter_v1_crawl_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Crawler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortedCrawler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Join); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Heartbeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Crawler_Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Crawler_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_data_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Crawler_Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_data_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Crawler_Options_Cookie); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_data_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_data_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Join_Ping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_data_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Join_Pong); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_data_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Join_Ping_Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_data_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Heartbeat_Ping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_data_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Heartbeat_Pong); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_data_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_data_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command_Request_Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_data_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command_Request_KeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawl_data_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command_Request_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chameleon_smelter_v1_crawl_data_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chameleon_smelter_v1_crawl_data_proto_goTypes,
		DependencyIndexes: file_chameleon_smelter_v1_crawl_data_proto_depIdxs,
		EnumInfos:         file_chameleon_smelter_v1_crawl_data_proto_enumTypes,
		MessageInfos:      file_chameleon_smelter_v1_crawl_data_proto_msgTypes,
	}.Build()
	File_chameleon_smelter_v1_crawl_data_proto = out.File
	file_chameleon_smelter_v1_crawl_data_proto_rawDesc = nil
	file_chameleon_smelter_v1_crawl_data_proto_goTypes = nil
	file_chameleon_smelter_v1_crawl_data_proto_depIdxs = nil
}
