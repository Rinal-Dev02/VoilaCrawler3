// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: chameleon/smelter/v1/crawler/item/data.proto

package item

import (
	media "github.com/voiladev/VoilaCrawler/protoc-gen-go/chameleon/api/media"
	regulation "github.com/voiladev/VoilaCrawler/protoc-gen-go/chameleon/api/regulation"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SkuSpecType
type SkuSpecType int32

const (
	// SKU Size
	SkuSpecType_SkuSpecUnknown SkuSpecType = 0
	// SKU Size
	SkuSpecType_SkuSpecSize SkuSpecType = 1
	// SKU Color
	SkuSpecType_SkuSpecColor SkuSpecType = 2
)

// Enum value maps for SkuSpecType.
var (
	SkuSpecType_name = map[int32]string{
		0: "SkuSpecUnknown",
		1: "SkuSpecSize",
		2: "SkuSpecColor",
	}
	SkuSpecType_value = map[string]int32{
		"SkuSpecUnknown": 0,
		"SkuSpecSize":    1,
		"SkuSpecColor":   2,
	}
)

func (x SkuSpecType) Enum() *SkuSpecType {
	p := new(SkuSpecType)
	*p = x
	return p
}

func (x SkuSpecType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SkuSpecType) Descriptor() protoreflect.EnumDescriptor {
	return file_chameleon_smelter_v1_crawler_item_data_proto_enumTypes[0].Descriptor()
}

func (SkuSpecType) Type() protoreflect.EnumType {
	return &file_chameleon_smelter_v1_crawler_item_data_proto_enumTypes[0]
}

func (x SkuSpecType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SkuSpecType.Descriptor instead.
func (SkuSpecType) EnumDescriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawler_item_data_proto_rawDescGZIP(), []int{0}
}

// Type
type Stock_StockStatus int32

const (
	// Unknown
	Stock_StockStatusUnknown Stock_StockStatus = 0
	// InStock
	Stock_InStock Stock_StockStatus = 1
	// // LowInStock
	// LowStock         = 2;
	// OutOfStock
	Stock_OutOfStock Stock_StockStatus = 10
)

// Enum value maps for Stock_StockStatus.
var (
	Stock_StockStatus_name = map[int32]string{
		0:  "StockStatusUnknown",
		1:  "InStock",
		10: "OutOfStock",
	}
	Stock_StockStatus_value = map[string]int32{
		"StockStatusUnknown": 0,
		"InStock":            1,
		"OutOfStock":         10,
	}
)

func (x Stock_StockStatus) Enum() *Stock_StockStatus {
	p := new(Stock_StockStatus)
	*p = x
	return p
}

func (x Stock_StockStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Stock_StockStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_chameleon_smelter_v1_crawler_item_data_proto_enumTypes[1].Descriptor()
}

func (Stock_StockStatus) Type() protoreflect.EnumType {
	return &file_chameleon_smelter_v1_crawler_item_data_proto_enumTypes[1]
}

func (x Stock_StockStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Stock_StockStatus.Descriptor instead.
func (Stock_StockStatus) EnumDescriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawler_item_data_proto_rawDescGZIP(), []int{3, 0}
}

// Store
type Store struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Store) Reset() {
	*x = Store{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawler_item_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Store) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Store) ProtoMessage() {}

func (x *Store) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawler_item_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Store.ProtoReflect.Descriptor instead.
func (*Store) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawler_item_data_proto_rawDescGZIP(), []int{0}
}

func (x *Store) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Store) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Source
type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// CrawlUrl
	CrawlUrl string `protobuf:"bytes,4,opt,name=crawlUrl,proto3" json:"crawlUrl,omitempty"`
	// SourceUrl
	SourceUrl string `protobuf:"bytes,5,opt,name=sourceUrl,proto3" json:"sourceUrl,omitempty"`
	// Locale default en_US
	Locale string `protobuf:"bytes,11,opt,name=locale,proto3" json:"locale,omitempty"`
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawler_item_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawler_item_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawler_item_data_proto_rawDescGZIP(), []int{1}
}

func (x *Source) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Source) GetCrawlUrl() string {
	if x != nil {
		return x.CrawlUrl
	}
	return ""
}

func (x *Source) GetSourceUrl() string {
	if x != nil {
		return x.SourceUrl
	}
	return ""
}

func (x *Source) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

// Stats
type Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Rating
	Rating float32 `protobuf:"fixed32,1,opt,name=rating,proto3" json:"rating,omitempty"`
	// FavoriteCount
	FavoriteCount int32 `protobuf:"varint,2,opt,name=favoriteCount,proto3" json:"favoriteCount,omitempty"`
	// SellCount 销量
	SellCount int32 `protobuf:"varint,5,opt,name=sellCount,proto3" json:"sellCount,omitempty"`
	// ReviewCount
	ReviewCount int32 `protobuf:"varint,6,opt,name=reviewCount,proto3" json:"reviewCount,omitempty"`
	// OnlineTime
	OnlineTime string `protobuf:"bytes,11,opt,name=onlineTime,proto3" json:"onlineTime,omitempty"`
}

func (x *Stats) Reset() {
	*x = Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawler_item_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawler_item_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawler_item_data_proto_rawDescGZIP(), []int{2}
}

func (x *Stats) GetRating() float32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *Stats) GetFavoriteCount() int32 {
	if x != nil {
		return x.FavoriteCount
	}
	return 0
}

func (x *Stats) GetSellCount() int32 {
	if x != nil {
		return x.SellCount
	}
	return 0
}

func (x *Stats) GetReviewCount() int32 {
	if x != nil {
		return x.ReviewCount
	}
	return 0
}

func (x *Stats) GetOnlineTime() string {
	if x != nil {
		return x.OnlineTime
	}
	return ""
}

// Stock
type Stock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// StockStatus
	StockStatus Stock_StockStatus `protobuf:"varint,1,opt,name=stockStatus,proto3,enum=chameleon.smelter.v1.crawler.item.Stock_StockStatus" json:"stockStatus,omitempty"`
	// StockCount
	StockCount int32 `protobuf:"varint,2,opt,name=stockCount,proto3" json:"stockCount,omitempty"`
}

func (x *Stock) Reset() {
	*x = Stock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawler_item_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stock) ProtoMessage() {}

func (x *Stock) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawler_item_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stock.ProtoReflect.Descriptor instead.
func (*Stock) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawler_item_data_proto_rawDescGZIP(), []int{3}
}

func (x *Stock) GetStockStatus() Stock_StockStatus {
	if x != nil {
		return x.StockStatus
	}
	return Stock_StockStatusUnknown
}

func (x *Stock) GetStockCount() int32 {
	if x != nil {
		return x.StockCount
	}
	return 0
}

// Price
type Price struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Currency
	Currency regulation.Currency `protobuf:"varint,1,opt,name=currency,proto3,enum=chameleon.api.regulation.Currency" json:"currency,omitempty"`
	// Current
	Current int32 `protobuf:"varint,2,opt,name=current,proto3" json:"current,omitempty"`
	// MSRP
	Msrp int32 `protobuf:"varint,3,opt,name=msrp,proto3" json:"msrp,omitempty"`
	// Discount
	Discount int32 `protobuf:"varint,6,opt,name=discount,proto3" json:"discount,omitempty"`
	// Discount1
	Discount1 int32 `protobuf:"varint,7,opt,name=discount1,proto3" json:"discount1,omitempty"`
}

func (x *Price) Reset() {
	*x = Price{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawler_item_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Price) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Price) ProtoMessage() {}

func (x *Price) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawler_item_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Price.ProtoReflect.Descriptor instead.
func (*Price) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawler_item_data_proto_rawDescGZIP(), []int{4}
}

func (x *Price) GetCurrency() regulation.Currency {
	if x != nil {
		return x.Currency
	}
	return regulation.Currency_CurrencyUnknown
}

func (x *Price) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *Price) GetMsrp() int32 {
	if x != nil {
		return x.Msrp
	}
	return 0
}

func (x *Price) GetDiscount() int32 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *Price) GetDiscount1() int32 {
	if x != nil {
		return x.Discount1
	}
	return 0
}

// SkuSpecOption
type SkuSpecOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Type
	Type SkuSpecType `protobuf:"varint,2,opt,name=type,proto3,enum=chameleon.smelter.v1.crawler.item.SkuSpecType" json:"type,omitempty"`
	// Name
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Value
	Value string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	// Icon
	Icon string `protobuf:"bytes,7,opt,name=icon,proto3" json:"icon,omitempty"`
	// Index
	Index int32 `protobuf:"varint,11,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *SkuSpecOption) Reset() {
	*x = SkuSpecOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawler_item_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkuSpecOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkuSpecOption) ProtoMessage() {}

func (x *SkuSpecOption) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawler_item_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkuSpecOption.ProtoReflect.Descriptor instead.
func (*SkuSpecOption) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawler_item_data_proto_rawDescGZIP(), []int{5}
}

func (x *SkuSpecOption) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SkuSpecOption) GetType() SkuSpecType {
	if x != nil {
		return x.Type
	}
	return SkuSpecType_SkuSpecUnknown
}

func (x *SkuSpecOption) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SkuSpecOption) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SkuSpecOption) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *SkuSpecOption) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

// Sku
type Sku struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sourceId
	SourceId string `protobuf:"bytes,1,opt,name=sourceId,proto3" json:"sourceId,omitempty"`
	// Specs
	Specs []*SkuSpecOption `protobuf:"bytes,3,rep,name=specs,proto3" json:"specs,omitempty"`
	// Title
	Title string `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	// Description
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	// Medias 图片/视频等
	Medias []*media.Media `protobuf:"bytes,31,rep,name=medias,proto3" json:"medias,omitempty"`
	// Price
	Price *Price `protobuf:"bytes,32,opt,name=price,proto3" json:"price,omitempty"`
	// 库存
	Stock *Stock `protobuf:"bytes,33,opt,name=stock,proto3" json:"stock,omitempty"`
	// 统计
	Stats *Stats `protobuf:"bytes,51,opt,name=stats,proto3" json:"stats,omitempty"`
	// Index
	Index int32 `protobuf:"varint,52,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Sku) Reset() {
	*x = Sku{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawler_item_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sku) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sku) ProtoMessage() {}

func (x *Sku) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawler_item_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sku.ProtoReflect.Descriptor instead.
func (*Sku) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawler_item_data_proto_rawDescGZIP(), []int{6}
}

func (x *Sku) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *Sku) GetSpecs() []*SkuSpecOption {
	if x != nil {
		return x.Specs
	}
	return nil
}

func (x *Sku) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Sku) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Sku) GetMedias() []*media.Media {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *Sku) GetPrice() *Price {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *Sku) GetStock() *Stock {
	if x != nil {
		return x.Stock
	}
	return nil
}

func (x *Sku) GetStats() *Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Sku) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

// Product
type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Store
	Store *Store `protobuf:"bytes,2,opt,name=store,proto3" json:"store,omitempty"`
	// Source
	Source *Source `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	// Brand
	BrandName string `protobuf:"bytes,4,opt,name=brandName,proto3" json:"brandName,omitempty"`
	// Title
	Title string `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	// Description
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// CrowdType 人群
	CrowdType string `protobuf:"bytes,11,opt,name=crowdType,proto3" json:"crowdType,omitempty"`
	// Categories 逗号分隔
	Category string `protobuf:"bytes,12,opt,name=category,proto3" json:"category,omitempty"`
	// SubCategory
	SubCategory string `protobuf:"bytes,13,opt,name=subCategory,proto3" json:"subCategory,omitempty"`
	// SubCategory2
	SubCategory2 string `protobuf:"bytes,14,opt,name=subCategory2,proto3" json:"subCategory2,omitempty"`
	// Medias 图片/视频等
	Medias []*media.Media `protobuf:"bytes,31,rep,name=medias,proto3" json:"medias,omitempty"`
	// Price
	Price *Price `protobuf:"bytes,32,opt,name=price,proto3" json:"price,omitempty"`
	// Stock
	Stock *Stock `protobuf:"bytes,33,opt,name=stock,proto3" json:"stock,omitempty"`
	// SkuItems
	SkuItems []*Sku `protobuf:"bytes,42,rep,name=skuItems,proto3" json:"skuItems,omitempty"`
	// Stats
	Stats *Stats `protobuf:"bytes,51,opt,name=stats,proto3" json:"stats,omitempty"`
	// Index
	Index int32 `protobuf:"varint,25,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chameleon_smelter_v1_crawler_item_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_chameleon_smelter_v1_crawler_item_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_chameleon_smelter_v1_crawler_item_data_proto_rawDescGZIP(), []int{7}
}

func (x *Product) GetStore() *Store {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *Product) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Product) GetBrandName() string {
	if x != nil {
		return x.BrandName
	}
	return ""
}

func (x *Product) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Product) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Product) GetCrowdType() string {
	if x != nil {
		return x.CrowdType
	}
	return ""
}

func (x *Product) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Product) GetSubCategory() string {
	if x != nil {
		return x.SubCategory
	}
	return ""
}

func (x *Product) GetSubCategory2() string {
	if x != nil {
		return x.SubCategory2
	}
	return ""
}

func (x *Product) GetMedias() []*media.Media {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *Product) GetPrice() *Price {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *Product) GetStock() *Stock {
	if x != nil {
		return x.Stock
	}
	return nil
}

func (x *Product) GetSkuItems() []*Sku {
	if x != nil {
		return x.SkuItems
	}
	return nil
}

func (x *Product) GetStats() *Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Product) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

var File_chameleon_smelter_v1_crawler_item_data_proto protoreflect.FileDescriptor

var file_chameleon_smelter_v1_crawler_item_data_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2f, 0x73, 0x6d, 0x65, 0x6c,
	0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x2f, 0x69,
	0x74, 0x65, 0x6d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21,
	0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x2e, 0x69, 0x74, 0x65,
	0x6d, 0x1a, 0x23, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f,
	0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2b, 0x0a, 0x05, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x6a, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x22,
	0xa5, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x12, 0x56, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65,
	0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72,
	0x61, 0x77, 0x6c, 0x65, 0x72, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x42, 0x0a, 0x0b, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x10, 0x0a, 0x22, 0xaf, 0x01,
	0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x6d,
	0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x73, 0x72, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x6d, 0x73, 0x72, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x22,
	0xb7, 0x01, 0x0a, 0x0d, 0x53, 0x6b, 0x75, 0x53, 0x70, 0x65, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x42, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2e, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x65, 0x6c,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x2e, 0x69,
	0x74, 0x65, 0x6d, 0x2e, 0x53, 0x6b, 0x75, 0x53, 0x70, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xab, 0x03, 0x0a, 0x03, 0x53, 0x6b,
	0x75, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x46, 0x0a,
	0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63,
	0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x2e, 0x69, 0x74, 0x65, 0x6d,
	0x2e, 0x53, 0x6b, 0x75, 0x53, 0x70, 0x65, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x73, 0x70, 0x65, 0x63, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a,
	0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x73, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x65,
	0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x2e,
	0x69, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x3e, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x65,
	0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x2e,
	0x69, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x12, 0x3e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x65,
	0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x2e,
	0x69, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x34, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xb0, 0x05, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x12, 0x3e, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73,
	0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65,
	0x72, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e,
	0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c,
	0x65, 0x72, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x72, 0x6f, 0x77, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x72, 0x6f, 0x77, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x32, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x32, 0x12, 0x32, 0x0a, 0x06,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73,
	0x12, 0x3e, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x65, 0x6c,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x2e, 0x69,
	0x74, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x3e, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73, 0x6d, 0x65, 0x6c,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x2e, 0x69,
	0x74, 0x65, 0x6d, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x12, 0x42, 0x0a, 0x08, 0x73, 0x6b, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x2a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x73,
	0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65,
	0x72, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x6b, 0x75, 0x52, 0x08, 0x73, 0x6b, 0x75, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x3e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e,
	0x73, 0x6d, 0x65, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c,
	0x65, 0x72, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2a, 0x44, 0x0a, 0x0b, 0x53, 0x6b,
	0x75, 0x53, 0x70, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x6b, 0x75,
	0x53, 0x70, 0x65, 0x63, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x6b, 0x75, 0x53, 0x70, 0x65, 0x63, 0x53, 0x69, 0x7a, 0x65, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x6b, 0x75, 0x53, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x10, 0x02,
	0x42, 0x28, 0x5a, 0x26, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2f, 0x73, 0x6d,
	0x65, 0x6c, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72,
	0x2f, 0x69, 0x74, 0x65, 0x6d, 0x3b, 0x69, 0x74, 0x65, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_chameleon_smelter_v1_crawler_item_data_proto_rawDescOnce sync.Once
	file_chameleon_smelter_v1_crawler_item_data_proto_rawDescData = file_chameleon_smelter_v1_crawler_item_data_proto_rawDesc
)

func file_chameleon_smelter_v1_crawler_item_data_proto_rawDescGZIP() []byte {
	file_chameleon_smelter_v1_crawler_item_data_proto_rawDescOnce.Do(func() {
		file_chameleon_smelter_v1_crawler_item_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_chameleon_smelter_v1_crawler_item_data_proto_rawDescData)
	})
	return file_chameleon_smelter_v1_crawler_item_data_proto_rawDescData
}

var file_chameleon_smelter_v1_crawler_item_data_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_chameleon_smelter_v1_crawler_item_data_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_chameleon_smelter_v1_crawler_item_data_proto_goTypes = []interface{}{
	(SkuSpecType)(0),         // 0: chameleon.smelter.v1.crawler.item.SkuSpecType
	(Stock_StockStatus)(0),   // 1: chameleon.smelter.v1.crawler.item.Stock.StockStatus
	(*Store)(nil),            // 2: chameleon.smelter.v1.crawler.item.Store
	(*Source)(nil),           // 3: chameleon.smelter.v1.crawler.item.Source
	(*Stats)(nil),            // 4: chameleon.smelter.v1.crawler.item.Stats
	(*Stock)(nil),            // 5: chameleon.smelter.v1.crawler.item.Stock
	(*Price)(nil),            // 6: chameleon.smelter.v1.crawler.item.Price
	(*SkuSpecOption)(nil),    // 7: chameleon.smelter.v1.crawler.item.SkuSpecOption
	(*Sku)(nil),              // 8: chameleon.smelter.v1.crawler.item.Sku
	(*Product)(nil),          // 9: chameleon.smelter.v1.crawler.item.Product
	(regulation.Currency)(0), // 10: chameleon.api.regulation.Currency
	(*media.Media)(nil),      // 11: chameleon.api.media.Media
}
var file_chameleon_smelter_v1_crawler_item_data_proto_depIdxs = []int32{
	1,  // 0: chameleon.smelter.v1.crawler.item.Stock.stockStatus:type_name -> chameleon.smelter.v1.crawler.item.Stock.StockStatus
	10, // 1: chameleon.smelter.v1.crawler.item.Price.currency:type_name -> chameleon.api.regulation.Currency
	0,  // 2: chameleon.smelter.v1.crawler.item.SkuSpecOption.type:type_name -> chameleon.smelter.v1.crawler.item.SkuSpecType
	7,  // 3: chameleon.smelter.v1.crawler.item.Sku.specs:type_name -> chameleon.smelter.v1.crawler.item.SkuSpecOption
	11, // 4: chameleon.smelter.v1.crawler.item.Sku.medias:type_name -> chameleon.api.media.Media
	6,  // 5: chameleon.smelter.v1.crawler.item.Sku.price:type_name -> chameleon.smelter.v1.crawler.item.Price
	5,  // 6: chameleon.smelter.v1.crawler.item.Sku.stock:type_name -> chameleon.smelter.v1.crawler.item.Stock
	4,  // 7: chameleon.smelter.v1.crawler.item.Sku.stats:type_name -> chameleon.smelter.v1.crawler.item.Stats
	2,  // 8: chameleon.smelter.v1.crawler.item.Product.store:type_name -> chameleon.smelter.v1.crawler.item.Store
	3,  // 9: chameleon.smelter.v1.crawler.item.Product.source:type_name -> chameleon.smelter.v1.crawler.item.Source
	11, // 10: chameleon.smelter.v1.crawler.item.Product.medias:type_name -> chameleon.api.media.Media
	6,  // 11: chameleon.smelter.v1.crawler.item.Product.price:type_name -> chameleon.smelter.v1.crawler.item.Price
	5,  // 12: chameleon.smelter.v1.crawler.item.Product.stock:type_name -> chameleon.smelter.v1.crawler.item.Stock
	8,  // 13: chameleon.smelter.v1.crawler.item.Product.skuItems:type_name -> chameleon.smelter.v1.crawler.item.Sku
	4,  // 14: chameleon.smelter.v1.crawler.item.Product.stats:type_name -> chameleon.smelter.v1.crawler.item.Stats
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_chameleon_smelter_v1_crawler_item_data_proto_init() }
func file_chameleon_smelter_v1_crawler_item_data_proto_init() {
	if File_chameleon_smelter_v1_crawler_item_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chameleon_smelter_v1_crawler_item_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Store); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawler_item_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawler_item_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawler_item_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawler_item_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Price); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawler_item_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkuSpecOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawler_item_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sku); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chameleon_smelter_v1_crawler_item_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chameleon_smelter_v1_crawler_item_data_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chameleon_smelter_v1_crawler_item_data_proto_goTypes,
		DependencyIndexes: file_chameleon_smelter_v1_crawler_item_data_proto_depIdxs,
		EnumInfos:         file_chameleon_smelter_v1_crawler_item_data_proto_enumTypes,
		MessageInfos:      file_chameleon_smelter_v1_crawler_item_data_proto_msgTypes,
	}.Build()
	File_chameleon_smelter_v1_crawler_item_data_proto = out.File
	file_chameleon_smelter_v1_crawler_item_data_proto_rawDesc = nil
	file_chameleon_smelter_v1_crawler_item_data_proto_goTypes = nil
	file_chameleon_smelter_v1_crawler_item_data_proto_depIdxs = nil
}
